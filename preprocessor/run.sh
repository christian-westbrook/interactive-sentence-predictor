#!/bin/sh

# =================================================================================================
# Program		: Language Model Predictor Preprocessor
# Script		: run.sh
# Developer		: Christian Westbrook
# Abstract		: This script facilitates the execution of the preprocessor for the language
# 				  model predictor.
# =================================================================================================

# Configures this shell script to exit immediately if an error occurs.
# This includes any program returning an exit code other than 0
set -e

# Move into the tokenizer directory and compile the JavaCC tokenizer
cd ./tokenizer
javacc PS3.jj

# Check if the output folder exists. If the output folder exists, remove 
# it. Either way, create a new output folder.
if [ -d output ]
then
	rm -rf output
fi

mkdir output

# Compile the Java source code generated by the JavaCC tokenizer.
javac LMPTokenizer.java

# Execute PS2Tokenizer. The input is in ./tokenizer/training-data, and the
# output will be directed to ./tokenizer/output.
java LMPTokenizer training-data output

# After the tokenizer completes execution, remove each of the files generated when compiling the
# tokenizer.

rm ParseException.java
rm ParseException.class

rm LMPTokenizerConstants.java
rm LMPTokenizerConstants.class

rm LMPTokenizerTokenManager.java
rm LMPTokenizerTokenManager.class

rm TokenMgrError.java
rm TokenMgrError.class

rm LMPTokenizer.java
rm LMPTokenizer.class

rm SimpleCharStream.java
rm SimpleCharStream.class

rm Token.java
rm Token.class

# Merge each of the output files into a single file of output
cat output/*.out > ./output/tokens.out

# Move back a directory and check if the data folder exists. 
# If the data folder exists, remove it. Either way, create a new data folder.
cd ..

if [ -d data ]
then
	rm -rf data
fi

mkdir data

# Compile and execute the Builder class
javac Builder.java
java Builder

# Move back to the root directory for the repository. Remove the existing data directory
# and replace it with the new data.
cd ..
rm -rf data
mv ./preprocessor/data/ ./data/