//=================================================================================================
// Program		: Interactive Sentence Predictor Preprocessor
// Class		: PS3.jj
// Developers	: Renae Fisher, Christian Westbrook
// Abstract		:
//=================================================================================================

options
{
	static = false;
}

PARSER_BEGIN(LMPTokenizer)

import java.io.*;

public class LMPTokenizer
{
  
	public static void main(String[] args) throws ParseException, IOException
  	{
		if(args.length != 2)
		{
			System.out.println("ERROR: Invalid arguments specified\n");
			System.out.println("Please run this program with the following syntax: java LMPTokenizer.java <path of input dir> <path of output dir>");
			System.exit(1);
		}
		else
		{
			File indir = new File(args[0]);
			File outdir = new File(args[1]);

			if(!outdir.exists())
				outdir.mkdir();
			
			if(!indir.exists())
				indir.mkdir();

			File[] files = indir.listFiles();

			for(File file : files)
				tokenize(file, outdir);
		}
  	}

  	private static void tokenize(File input, File outdir) throws ParseException, IOException
  	{
		BufferedReader br = new BufferedReader(new FileReader(input));
		LMPTokenizer u = new LMPTokenizer(br);
  		Token t;
  	
  		t = u.getNextToken();

		String outpath = outdir.getName();
		if(outpath.charAt(outpath.length() - 1) != '/')
			outpath = outpath + "/";
	
		String outputFileName = outpath + input.getName() + ".out";
  		File output = new File(outputFileName);

		if(output.exists())
			output.delete();
  	
  		output.createNewFile();
  		FileWriter fw = new FileWriter(output);
  		BufferedWriter bw = new BufferedWriter(fw);

  		while ( t.kind != LMPTokenizerConstants.EOF )
  		{
			if(LMPTokenizer.tokenImage[ t.kind ].equalsIgnoreCase("<WORD>"))
				bw.write(t.image + "\n");

  	  		String token = t.image;
			if(token.equals("\n"))
				token = "newline";
			if(token.equals("\r"))
				token = "carraige return";
			if(token.equals("\t"))
				token = "tab";

  			//System.out.printf("Token:  %15s    Type:  %15s  %n" , token, LMPTokenizer.tokenImage[ t.kind ]  );
  			t = u.getNextToken();
  		}

  		br.close();
  		bw.close();
  	}
}

PARSER_END(LMPTokenizer)

TOKEN_MGR_DECLS : {
	
}

SKIP : {

  < SPACE : (" "|"\\s")+ >
| < ("\t")+ >
| "\r"
| "\n"
| < "<" > : IN_HTML
| < OPERATOR : ["+","-","*","/"]|("&gt;") >
| < PUNCTUATION : (","|"?"|"!"|":"|"'"|"-"|".")+>
| < SPECIAL_ENTITY : ("&"(["a"-"z","A"-"Z"])+";"|"&#"(["0"-"9"])+";") >

}

// Skip tokens that can't be easily recognized by Voce.

SKIP : {
  
  < EMAIL: (["a"-"z","A"-"Z","0"-"9"])+"@"((".")?["a"-"z","A"-"Z","0"-"9"])+ >
| < DOMAIN : "@"((".")?["a"-"z","A"-"Z"])+ >
| < PHONE_NUMBER :  (("(")?["0"-"9"]["0"-"9"]["0"-"9"](")")?(< SPACE >|"-"|".")+)+["0"-"9"]["0"-"9"]["0"-"9"]["0"-"9"] >
| < EQUATION : ((["0"-"9"])+(< SPACE >)?(< OPERATOR >)?(< SPACE >)?)+(< SPACE >)?("="(< SPACE >)?(["0"-"9"](".")?)+)? >
| < NUMBER      : ((".")?(["0"-"9"])+(",")?)+ >

}

// We're specifically looking for words.

TOKEN : {

  < WORD2       : (["a"-"z","A"-"Z"])+"'"(["a"-"z","A"-"Z"])+ >
| < WORD        : (["a"-"z","A"-"Z"])+ >
| < MISC  : ~[] >

}

// We'll skip whole HTML tags.

< IN_HTML > SKIP : {
 
  < ">" > : DEFAULT
| < PRE     : "pre"(">")? > : IN_PRE
| < CLOSETAG    : "/"(< SPACE >)?(["a"-"z"])+(< SPACE >)?(">")? > : DEFAULT
| < STYLETAG : "style" > : IN_STYLE
| < HEADTAG : "head" > : IN_HEAD
| < ASPEECH : "a"(" ")?"name"(" ")?"="(" ")?"\"speech"(["0"-"9"])+ > : IN_ASPEECH
| < OPENTAG     : (["a"-"z","A"-"Z"])+ >
| < ~[] >

}

// Skip anything between style tags.

< IN_STYLE > SKIP : {

  < CLOSETAG_STYLE : "/"(< SPACE >)?"style"(< SPACE >)?(">")? > : DEFAULT
| < ~[] >

}

// Skip anything between head tags.

< IN_HEAD > SKIP : {

  < CLOSETAG_HEAD : "/"(< SPACE >)?"head"(< SPACE >)?(">")? > : DEFAULT
| < ~[] >

}

// Skip a particular tag.

< IN_ASPEECH > SKIP : {

  < CLOSETAG_ASPEECH    : "/"(< SPACE >)?"a"(< SPACE >)?(">")? > : DEFAULT
| < ~[] >

}

// Use special rules when dealing with pre tags.

< IN_PRE > SKIP : {

  < CLOSE_PRE : "</"(< SPACE >)?"pre"(< SPACE >)?(">")? > : DEFAULT
| < ASSIGNMENT : (["a"-"z","A"-"Z"])+" = "(["a"-"z","A"-"Z","0"-"9"])+ >
| < COND : (["a"-"z","A"-"Z","0"-"9"])+("<"|">"|"==")(["a"-"z","A"-"Z","0"-"9"])+ >
| < MISC_PRE : ~[] >

}

< IN_PRE > TOKEN : {

   < WORD_PRE : (["a"-"z","A"-"Z"])+ >
|  < FUNCTION : ((".")?(["a"-"z","A"-"Z"]))+ >

}
