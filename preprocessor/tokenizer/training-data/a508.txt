<page>
<title>Advanced Encryption Standard</title>
<ns>0</ns>
<id>1260</id>
<revision>
<id>802543480</id>
<parentid>802284631</parentid>
<timestamp>2017-09-26T20:54:32Z</timestamp>
<contributor>
<username>NoToleranceForIntolerance</username>
<id>28550269</id>
</contributor>
<comment>AES is symmetric</comment>
<model>wikitext</model>
<format>text/x-wiki</format>
<text xml:space="preserve">{{Infobox block cipher
| name          = Advanced Encryption Standard&lt;br/&gt;(Rijndael)
| image         = AES-SubBytes.svg
| caption       = The &lt;tt&gt;SubBytes&lt;/tt&gt; step, one of four stages in a round of AES
| designers     = [[Vincent Rijmen]], [[Joan Daemen]]
| publish date  = 1998
| derived from  = [[Square (cipher)|Square]]
| derived to    = [[Anubis (cipher)|Anubis]], [[Grand Cru (cipher)|Grand Cru]]
| related to    =
| certification = [[Advanced Encryption Standard process|AES]] winner, [[CRYPTREC]], [[NESSIE]], [[National Security Agency|NSA]]
| key size      = 128, 192 or 256 bits&lt;ref name=&quot;keysize&quot;&gt;Key sizes of 128, 160, 192, 224, and 256 bits are supported by the Rijndael algorithm, but only the 128, 192, and 256-bit key sizes are specified in the AES standard.&lt;/ref&gt;
| block size    = 128 bits&lt;ref name=&quot;blocksize&quot;&gt;Block sizes of 128, 160, 192, 224, and 256 bits are supported by the Rijndael algorithm for each key size, but only the 128-bit block size is specified in the AES standard.&lt;/ref&gt;
| structure     = [[Substitution-permutation network]]
| rounds        = 10, 12 or 14 (depending on key size)
| cryptanalysis = Attacks have been published that are computationally faster than a full [[brute-force attack]], though none as of 2013 are computationally feasible.&lt;ref name=&quot;aesbc&quot;&gt;{{cite web|url=http://research.microsoft.com/en-us/projects/cryptanalysis/aesbc.pdf|archiveurl=https://www.webcitation.org/68GTcKdoD?url=http://research.microsoft.com/en-us/projects/cryptanalysis/aesbc.pdf|archivedate=2012-06-08|title=Biclique Cryptanalysis of the Full AES|accessdate=July 23, 2013}} – Broken link!&lt;/ref&gt;

For AES-128, the key can be recovered with a computational complexity of 2&lt;sup&gt;126.1&lt;/sup&gt; using the [[biclique attack]]. For biclique attacks on AES-192 and AES-256, the computational complexities of 2&lt;sup&gt;189.7&lt;/sup&gt; and 2&lt;sup&gt;254.4&lt;/sup&gt; respectively apply. [[Related-key attack]]s can break AES-192 and AES-256 with complexities 2&lt;sup&gt;176&lt;/sup&gt; and 2&lt;sup&gt;99.5&lt;/sup&gt; in both time and data, respectively.&lt;ref name=relkey&gt;Alex Biryukov and Dmitry Khovratovich, ''Related-key Cryptanalysis of the Full AES-192 and AES-256'', [http://eprint.iacr.org/2009/317]&lt;/ref&gt;
}}

The '''Advanced Encryption Standard''' ('''AES'''), also known by its original name '''Rijndael''' ({{IPA-nl|ˈrɛindaːl}}),&lt;ref name=&quot;Rijndael&quot;&gt;{{cite web|url=http://searchsecurity.techtarget.com/definition/Rijndael|title=Rijndael|accessdate=March 9, 2015}}&lt;/ref&gt;&lt;ref name=&quot;Rijndael-ammended.pdf&quot; /&gt; is a specification for the [[encryption]] of electronic data [[Advanced Encryption Standard process|established]] by the U.S. [[National Institute of Standards and Technology]] (NIST) in 2001.&lt;ref name=&quot;fips-197&quot;&gt;{{cite web|url=http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.197.pdf|title=Announcing the ADVANCED ENCRYPTION STANDARD (AES)|publisher=United States National Institute of Standards and Technology (NIST)|work=Federal Information Processing Standards Publication 197|date=November 26, 2001|accessdate=October 2, 2012}}&lt;/ref&gt;

AES is a subset of the Rijndael [[cipher]]&lt;ref name=&quot;Rijndael-ammended.pdf&quot;&gt;{{cite web |url=http://csrc.nist.gov/archive/aes/rijndael/Rijndael-ammended.pdf#page=1 |title=AES Proposal: Rijndael |last1=Daemen  |first1=Joan |last2=Rijmen |first2=Vincent |date=March 9, 2003 |publisher=National Institute of Standards and Technology |page=1 |accessdate=21 February 2013}}&lt;/ref&gt; developed by two [[Belgium|Belgian]] cryptographers, [[Vincent Rijmen]] and [[Joan Daemen]], who submitted a proposal to NIST during the AES selection process.&lt;ref&gt;{{Cite news |title=U.S. Selects a New Encryption Technique |author=John Schwartz |newspaper=New York Times |date=October 3, 2000 |url=https://www.nytimes.com/2000/10/03/business/technology-us-selects-a-new-encryption-technique.html }}&lt;/ref&gt; Rijndael is a family of ciphers with different key and block sizes.

For AES, NIST selected three members of the Rijndael family, each with a block size of 128 bits, but three different key lengths: 128, 192 and 256 bits.

AES has been adopted by the [[Federal government of the United States|U.S. government]] and is now used worldwide. It supersedes the [[Data Encryption Standard]] (DES),&lt;ref&gt;{{cite news|url=http://www.findarticles.com/p/articles/mi_m0IKZ/is_3_107?pnum=2&amp;opg=90984479 |title=NIST reports measurable success of Advanced Encryption Standard |work=Journal of Research of the National Institute of Standards and Technology |first=Harold B. |last=Westlund |date=2002 |deadurl=yes |archiveurl=https://web.archive.org/web/20071103105501/http://findarticles.com/p/articles/mi_m0IKZ/is_3_107?pnum=2&amp;opg=90984479 |archivedate=2007-11-03 |df= }}&lt;/ref&gt; which was published in 1977. The algorithm described by AES is a [[symmetric-key algorithm]], meaning the same key is used for both encrypting and decrypting the data.

In the United States, AES was announced by the NIST as U.S. [[Federal Information Processing Standard|FIPS]] PUB 197 (FIPS 197) on November 26, 2001.&lt;ref name=&quot;fips-197&quot; /&gt; This announcement followed a five-year standardization process in which fifteen competing designs were presented and evaluated, before the Rijndael cipher was selected as the most suitable (see [[Advanced Encryption Standard process]] for more details).

AES became effective as a federal government standard on May 26, 2002, after approval by the [[United States Secretary of Commerce|Secretary of Commerce]]. AES is included in the ISO/IEC 18033-3 standard. AES is available in many different encryption packages, and is the first (and only) publicly accessible [[cipher]] approved by the [[National Security Agency]] (NSA) for [[Classified information|top secret]] information when used in an NSA approved cryptographic module (see [[Advanced Encryption Standard#Security|Security of AES]], below).

== Definitive standards ==

The Advanced Encryption Standard (AES) is defined in each of:

* FIPS PUB 197: Advanced Encryption Standard (AES)&lt;ref name=&quot;fips-197&quot; /&gt;
* ISO/IEC 18033-3: Information technology – Security techniques – Encryption algorithms – Part 3: Block ciphers&lt;ref name=&quot;ISO_IEC_AES&quot; &gt;{{cite web
| url=http://www.iso.org/iso/home/store/catalogue_ics/catalogue_detail_ics.htm?csnumber=54531
| title=ISO/IEC 18033-3: Information technology – Security techniques – Encryption algorithms – Part 3: Block ciphers
}}&lt;/ref&gt;

== Description of the cipher ==
AES is based on a design principle known as a [[substitution-permutation network]], a combination of both substitution and permutation, and is fast in both software and hardware.&lt;ref&gt;{{cite web |url=http://www.schneier.com/paper-twofish-final.pdf |title=The Twofish Team's Final Comments on AES Selection |display-authors=7 |author=Bruce Schneier |author2=John Kelsey |author3=Doug Whiting|author4=David Wagner |author5=Chris Hall|author6=Niels Ferguson |author7=Tadayoshi Kohno|author8=Mike Stay |date=May 2000}}&lt;/ref&gt; Unlike its predecessor DES, AES does not use a [[Feistel network]]. AES is a variant of Rijndael which has a fixed [[block size (cryptography)|block size]] of 128 [[bit]]s, and a [[key size]] of 128, 192, or 256 bits. By contrast, the Rijndael specification ''per se'' is specified with block and key sizes that may be any multiple of 32 bits, with a minimum of 128 and a maximum of 256 bits.

AES operates on a 4 × 4 [[column-major order]] matrix of bytes, termed the ''state'', although some versions of Rijndael have a larger block size and have additional columns in the state. Most AES calculations are done in a particular [[Finite field arithmetic|finite field]].

For instance, if there are 16 bytes, &lt;math&gt;b_0, b_1, ..., b_{15}&lt;/math&gt;, these bytes are represented as this matrix:
::&lt;math&gt;
\begin{bmatrix}
b_0 &amp; b_4 &amp; b_8 &amp; b_{12} \\
b_1 &amp; b_5 &amp; b_9 &amp; b_{13} \\
b_2 &amp; b_6 &amp; b_{10} &amp; b_{14} \\
b_3 &amp; b_7 &amp; b_{11} &amp; b_{15}
\end{bmatrix}
&lt;/math&gt;

The key size used for an AES cipher specifies the number of repetitions of transformation rounds that convert the input, called the plaintext, into the final output, called the ciphertext. The number of cycles of repetition are as follows:

* 10 cycles of repetition for 128-bit keys.
* 12 cycles of repetition for 192-bit keys.
* 14 cycles of repetition for 256-bit keys.

Each round consists of several processing steps, each containing four similar but different stages, including one that depends on the encryption key itself. A set of reverse rounds are applied to transform ciphertext back into the original plaintext using the same encryption key.

=== High-level description of the algorithm ===

# KeyExpansions—round keys are derived from the cipher key using [[Rijndael key schedule|Rijndael's key schedule]]. AES requires a separate 128-bit round key block for each round plus one more.
# InitialRound
## &lt;tt&gt;AddRoundKey&lt;/tt&gt;—each byte of the state is combined with a block of the round key using bitwise xor.
# Rounds
## &lt;tt&gt;SubBytes&lt;/tt&gt;—a non-linear substitution step where each byte is replaced with another according to a [[Rijndael S-box|lookup table]].
## &lt;tt&gt;ShiftRows&lt;/tt&gt;—a transposition step where the last three rows of the state are shifted cyclically a certain number of steps.
## &lt;tt&gt;MixColumns&lt;/tt&gt;—a mixing operation which operates on the columns of the state, combining the four bytes in each column.
## &lt;tt&gt;AddRoundKey&lt;/tt&gt;
# Final Round (no &lt;tt&gt;MixColumns&lt;/tt&gt;)
## &lt;tt&gt;SubBytes&lt;/tt&gt;
## &lt;tt&gt;ShiftRows&lt;/tt&gt;
## &lt;tt&gt;AddRoundKey&lt;/tt&gt;.

=== The &lt;tt&gt;SubBytes&lt;/tt&gt; step ===
[[Image:AES-SubBytes.svg|right|320px|thumbnail|In the &lt;tt&gt;SubBytes&lt;/tt&gt; step, each byte in the state is replaced with its entry in a fixed 8-bit lookup table, ''S''; ''b&lt;sub&gt;ij&lt;/sub&gt;'' = ''S(a&lt;sub&gt;ij&lt;/sub&gt;)''.]]
In the &lt;tt&gt;SubBytes&lt;/tt&gt; step, each byte &lt;math&gt;a_{i,j}&lt;/math&gt; in the ''state'' matrix is replaced with a &lt;tt&gt;SubByte&lt;/tt&gt; &lt;math&gt;S(a_{i,j})&lt;/math&gt; using an 8-bit [[substitution box]], the [[Rijndael S-box]]. This operation provides the non-linearity in the [[cipher]]. The S-box used is derived from the [[multiplicative inverse]] over {{math|[[Finite field|GF]](2&lt;sup&gt;8&lt;/sup&gt;)}}, known to have good non-linearity properties. To avoid attacks based on simple algebraic properties, the S-box is constructed by combining the inverse function with an invertible [[affine transformation]]. The S-box is also chosen to avoid any fixed points (and so is a [[derangement]]), i.e., &lt;math&gt; S(a_{i,j}) \neq a_{i,j} &lt;/math&gt;, and also any opposite fixed points, i.e., &lt;math&gt; S(a_{i,j}) \oplus a_{i,j} \neq \text{FF}_{16} &lt;/math&gt;.
While performing the decryption, the &lt;tt&gt;InvSubBytes&lt;/tt&gt; step (the inverse of &lt;tt&gt;SubBytes&lt;/tt&gt;) is used, which requires first taking the inverse of the affine transformation and then finding the multiplicative inverse.

=== The &lt;tt&gt;ShiftRows&lt;/tt&gt; step ===
[[Image:AES-ShiftRows.svg|right|320px|thumbnail|In the &lt;tt&gt;ShiftRows&lt;/tt&gt; step, bytes in each row of the state are shifted cyclically to the left. The number of places each byte is shifted differs for each row.]]
The &lt;tt&gt;ShiftRows&lt;/tt&gt; step operates on the rows of the state; it cyclically shifts the bytes in each row by a certain [[Offset (computer science)|offset]]. For AES, the first row is left unchanged. Each byte of the second row is shifted one to the left. Similarly, the third and fourth rows are shifted by offsets of two and three respectively. For blocks of sizes 128 bits and 192 bits, the shifting pattern is the same. Row &lt;math&gt;n&lt;/math&gt; is shifted left circular by &lt;math&gt;n-1&lt;/math&gt; bytes. In this way, each column of the output state of the &lt;tt&gt;ShiftRows&lt;/tt&gt; step is composed of bytes from each column of the input state. (Rijndael variants with a larger block size have slightly different offsets). For a 256-bit block, the first row is unchanged and the shifting for the second, third and fourth row is 1 byte, 3 bytes and 4 bytes respectively—this change only applies for the Rijndael cipher when used with a 256-bit block, as AES does not use 256-bit blocks. The importance of this step is to avoid the columns being encrypted independently, in which case AES degenerates into four independent block ciphers.

=== The &lt;tt&gt;MixColumns&lt;/tt&gt; step ===
{{main|Rijndael MixColumns}}
[[Image:AES-MixColumns.svg|right|320px|thumbnail|In the &lt;tt&gt;MixColumns&lt;/tt&gt; step, each column of the state is multiplied with a fixed polynomial &lt;math&gt;c(x)&lt;/math&gt;.]]
In the &lt;tt&gt;MixColumns&lt;/tt&gt; step, the four bytes of each column of the state are combined using an invertible [[linear transformation]]. The &lt;tt&gt;MixColumns&lt;/tt&gt; function takes four bytes as input and outputs four bytes, where each input byte affects all four output bytes. Together with &lt;tt&gt;ShiftRows&lt;/tt&gt;, &lt;tt&gt;MixColumns&lt;/tt&gt; provides [[diffusion (cryptography)|diffusion]] in the cipher.

During this operation, each column is transformed using a fixed matrix (matrix left-multiplied by column gives new value of column in the state):

::&lt;math&gt;
\begin{bmatrix}
2 &amp; 3 &amp; 1 &amp; 1 \\
1 &amp; 2 &amp; 3 &amp; 1 \\
1 &amp; 1 &amp; 2 &amp; 3 \\
3 &amp; 1 &amp; 1 &amp; 2
\end{bmatrix}
&lt;/math&gt;

Matrix multiplication is composed of multiplication and addition of the entries. Entries are 8 bit bytes treated as coefficients of polynomial of order &lt;math&gt;x^7&lt;/math&gt;. Addition is simply XOR. Multiplication is modulo irreducible polynomial &lt;math&gt;x^8+x^4+x^3+x+1&lt;/math&gt;. If processed bit by bit then after shifting a conditional [[Exclusive or|XOR]] with 1B&lt;sub&gt;16&lt;/sub&gt; should be performed if the shifted value is larger than FF&lt;sub&gt;16&lt;/sub&gt; (overflow must be corrected by subtraction of generating polynomial). These are special cases of the usual multiplication in &lt;math&gt;\operatorname{GF}(2^8)&lt;/math&gt;.

In more general sense, each column is treated as a polynomial over &lt;math&gt;\operatorname{GF}(2^8)&lt;/math&gt; and is then multiplied modulo &lt;math&gt;z^4+1&lt;/math&gt; with a fixed polynomial &lt;math&gt;c(z) = {03}_{16} \cdot z^3 + z^2 + z + {02}_{16}&lt;/math&gt;. The coefficients are displayed in their [[hexadecimal]] equivalent of the binary representation of bit polynomials from &lt;math&gt;\operatorname{GF}(2)[x]&lt;/math&gt;. The &lt;tt&gt;MixColumns&lt;/tt&gt; step can also be viewed as a multiplication by the shown particular [[MDS matrix]] in the [[finite field]] &lt;math&gt;\operatorname{GF}(2^8)&lt;/math&gt;. This process is described further in the article [[Rijndael MixColumns]].

=== The &lt;tt&gt;AddRoundKey&lt;/tt&gt; step ===
[[Image:AES-AddRoundKey.svg|right|320px|thumbnail|In the &lt;tt&gt;AddRoundKey&lt;/tt&gt; step, each byte of the state is combined with a byte of the round subkey using the [[Exclusive or|XOR]] operation (⊕).]]
In the &lt;tt&gt;AddRoundKey&lt;/tt&gt; step, the subkey is combined with the state. For each round, a subkey is derived from the main [[key (cryptography)|key]] using [[Rijndael key schedule|Rijndael's key schedule]]; each subkey is the same size as the state. The subkey is added by combining each byte of the state with the corresponding byte of the subkey using bitwise [[Exclusive or|XOR]].

=== Optimization of the cipher ===
On systems with 32-bit or larger words, it is possible to speed up execution of this cipher by combining the &lt;tt&gt;SubBytes&lt;/tt&gt; and &lt;tt&gt;ShiftRows&lt;/tt&gt; steps with the &lt;tt&gt;MixColumns&lt;/tt&gt; step by transforming them into a sequence of table lookups. This requires four 256-entry 32-bit tables (together occupying 4096 bytes).  A round can then be performed with 16 table lookup operations and 12 32-bit exclusive-or operations, followed by four 32-bit exclusive-or operations in the &lt;tt&gt;AddRoundKey&lt;/tt&gt; step.&lt;ref&gt;[http://www.springerlink.com/index/UVX5NQGNN55VK199.pdf &quot;Efficient software implementation of AES on 32-bit platforms&quot;.] Lecture Notes in Computer Science: 2523. 2003&lt;/ref&gt;  Alternatively, the table lookup operation can be performed with a single 256-entry 32-bit table (occupying 1024 bytes) followed by circular rotation operations.

Using a byte-oriented approach, it is possible to combine the &lt;tt&gt;SubBytes&lt;/tt&gt;, &lt;tt&gt;ShiftRows&lt;/tt&gt;, and &lt;tt&gt;MixColumns&lt;/tt&gt; steps into a single round operation.&lt;ref&gt;{{cite web|url=https://code.google.com/p/byte-oriented-aes |title=byte-oriented-aes – A public domain byte-oriented implementation of AES in C – Google Project Hosting |publisher=Code.google.com |accessdate=2012-12-23}}&lt;/ref&gt;

== Security ==
Until May 2009, the only successful published attacks against the full AES were [[side-channel attack]]s on some specific implementations. The [[National Security Agency]] (NSA) reviewed all the AES finalists, including Rijndael, and stated that all of them were secure enough for U.S. Government non-classified data. In June 2003, the U.S. Government announced that AES could be used to protect [[classified information]]:
&lt;blockquote&gt;The design and strength of all key lengths of the AES algorithm (i.e., 128, 192 and 256) are sufficient to protect classified information up to the SECRET level. TOP SECRET information will require use of either the 192 or 256 key lengths. The implementation of AES in products intended to protect national security systems and/or information must be reviewed and certified by NSA prior to their acquisition and use.&lt;ref&gt;{{cite web|url=http://csrc.nist.gov/groups/ST/toolkit/documents/aes/CNSS15FS.pdf |title=National Policy on the Use of the Advanced Encryption Standard (AES) to Protect National Security Systems and National Security Information |author=Lynn Hathaway |date=June 2003  |format=PDF |accessdate=2011-02-15}}&lt;/ref&gt;&lt;/blockquote&gt;

AES has 10 rounds for 128-bit keys, 12 rounds for 192-bit keys, and 14 rounds for 256-bit keys.

By 2006, the best known attacks were on 7 rounds for 128-bit keys, 8 rounds for 192-bit keys, and 9 rounds for 256-bit keys.&lt;ref name=&quot;improved&quot;&gt;[[John Kelsey (cryptanalyst)|John Kelsey]], [[Stefan Lucks]], [[Bruce Schneier]], [[Mike Stay]], [[David A. Wagner|David Wagner]], and [[Doug Whiting]], ''Improved Cryptanalysis of Rijndael'', [[Fast Software Encryption]], 2000 pp213–230 [http://www.schneier.com/paper-rijndael.html]&lt;/ref&gt;

=== Known attacks ===
For cryptographers, a [[cryptanalysis|cryptographic]] &quot;break&quot; is anything faster than a [[brute-force attack]] – i.e., performing one trial decryption for each possible key in sequence (see [[Cryptanalysis#Computational resources required|Cryptanalysis]]). A break can thus include results that are infeasible with current technology. Despite being impractical, theoretical breaks can sometimes provide insight into vulnerability patterns. The largest successful publicly known [[brute-force attack]] against a widely implemented block-cipher encryption algorithm was against a 64-bit [[RC5]] key by [[distributed.net]] in 2006.&lt;ref name=ZD20060430&gt;{{cite web
|url=http://www.zdnet.com/blog/ou/is-encryption-really-crackable/204
|title=Is encryption really crackable?
|first1=George
|last1=Ou
|publisher=Ziff-Davis
|date=April 30, 2006
|archiveurl=https://www.webcitation.org/5rocpRxhN?url=http://www.zdnet.com/blog/ou/is-encryption-really-crackable/204
|archivedate=August 7, 2010
|accessdate=August 7, 2010
|deadurl=no
|df=
}}&lt;/ref&gt;

The key space increases by a factor of 2 for each additional bit of key length, and if every possible value of the key is equiprobable, this translates into a doubling of the average brute-force key search time. This implies that the effort of a brute-force search increases exponentially with key length. Key length in itself does not imply security against attacks, since there are ciphers with very long keys that have been found to be vulnerable.

AES has a fairly simple algebraic framework.&lt;ref&gt;{{cite web|url=http://www.isg.rhul.ac.uk/~sean/ |title=Sean Murphy |publisher=University of London |accessdate=2008-11-02}}&lt;/ref&gt; In 2002, a theoretical attack, named the &quot;[[XSL attack]]&quot;, was announced by [[Nicolas Courtois]] and [[Josef Pieprzyk]], purporting to show a weakness in the AES algorithm, partially due to the low complexity of its nonlinear components.&lt;ref&gt;{{cite web | url = http://www.schneier.com/crypto-gram-0209.html | title = AES News, Crypto-Gram Newsletter, September 15, 2002 | author = Bruce Schneier | accessdate = 2007-07-27| archiveurl= https://web.archive.org/web/20070707105715/http://www.schneier.com/crypto-gram-0209.html| archivedate= 7 July 2007 &lt;!--DASHBot--&gt;| deadurl= no}}&lt;/ref&gt;  Since then, other papers have shown that the attack, as originally presented, is unworkable; see [[XSL attack#Application to block ciphers|XSL attack on block ciphers]].

During the AES selection process, developers of competing algorithms wrote of Rijndael's algorithm &quot;...we are concerned about [its] use ... in security-critical applications.&quot;&lt;ref name=&quot;rijndael-algebraic&quot;&gt;
{{cite conference
| author = Niels Ferguson
| author-link = Niels Ferguson
| author2 = Richard Schroeppel
| author2-link = Richard Schroeppel
| author3 = Doug Whiting
| title = A simple algebraic representation of Rijndael
| booktitle = Proceedings of Selected Areas in Cryptography, 2001, Lecture Notes in Computer Science
| pages = 103–111
| publisher = [[Springer-Verlag]]
| date = 2001
| url = http://www.macfergus.com/pub/rdalgeq.html
| format = PDF/[[PostScript]]
| accessdate = 2006-10-06
| archiveurl= https://web.archive.org/web/20061104080748/http://www.macfergus.com/pub/rdalgeq.html
| archivedate= 4 November 2006| citeseerx = 10.1.1.28.4921
}}&lt;/ref&gt; In October 2000, however, at the end of the AES selection process, [[Bruce Schneier]], a developer of the competing algorithm [[Twofish]], wrote that while he thought successful academic attacks on Rijndael would be developed someday, he did not &quot;believe that anyone will ever discover an attack that will allow someone to read Rijndael traffic&quot;.&lt;ref&gt;Bruce Schneier, [http://www.schneier.com/crypto-gram-0010.html AES Announced], October 15, 2000&lt;/ref&gt;

In 2009, a new attack was discovered that exploits the simplicity of AES's key schedule and has a complexity of 2&lt;sup&gt;119&lt;/sup&gt;. In December 2009 it was improved to 2&lt;sup&gt;99.5&lt;/sup&gt;.&lt;ref name=relkey /&gt; This is a follow-up to an attack discovered earlier in 2009 by Alex Biryukov, Dmitry Khovratovich, and Ivica Nikolić, with a complexity of 2&lt;sup&gt;96&lt;/sup&gt; for one out of every 2&lt;sup&gt;35&lt;/sup&gt; keys.&lt;ref&gt;{{cite book
|title=Advances in Cryptology – CRYPTO 2009
|chapter=Distinguisher and Related-Key Attack on the Full AES-256
|last1=Nikolić
|first1=Ivica
|date=2009
|publisher=Springer Berlin / Heidelberg
|isbn=978-3-642-03355-1
|pages=231–249
|doi=10.1007/978-3-642-03356-8_14}}&lt;/ref&gt; However, related-key attacks are not of concern in any properly designed cryptographic protocol, as a properly designed protocol (i.e., implementational software) will take care not to allow related keys, essentially by [[Related-key attack#Preventing related-key attacks|constraining]] an attacker's means of selecting keys for relatedness.

Another attack was blogged by Bruce Schneier&lt;ref&gt;{{cite web
|url=http://www.schneier.com/blog/archives/2009/07/another_new_aes.html
|title=Another New AES Attack
|author=Bruce Schneier
|date=2009-07-30
|work=Schneier on Security, A blog covering security and security technology
|accessdate=2010-03-11}}&lt;/ref&gt;
on July 30, 2009, and released as a preprint&lt;ref&gt;{{cite web
|url=http://eprint.iacr.org/2009/374
|title=Key Recovery Attacks of Practical Complexity on AES Variants With Up To 10 Rounds
|author=Alex Biryukov
|author2=Orr Dunkelman|author3= Nathan Keller|author4= Dmitry Khovratovich|author5= Adi Shamir
|date=2009-08-19
|accessdate=2010-03-11| archiveurl= https://web.archive.org/web/20100128050656/http://eprint.iacr.org/2009/374| archivedate= 28 January 2010 &lt;!--DASHBot--&gt;| deadurl= no}}&lt;/ref&gt;
on August 3, 2009. This new attack, by Alex Biryukov, Orr Dunkelman, Nathan Keller, Dmitry Khovratovich, and [[Adi Shamir]], is against AES-256 that uses only two related keys and 2&lt;sup&gt;39&lt;/sup&gt; time to recover the complete 256-bit key of a 9-round version, or 2&lt;sup&gt;45&lt;/sup&gt; time for a 10-round version with a stronger type of related subkey attack, or 2&lt;sup&gt;70&lt;/sup&gt; time for an 11-round version. 256-bit AES uses 14 rounds, so these attacks aren't effective against full AES.

The practicality of these attacks with stronger related keys has been criticized,&lt;ref&gt;{{Cite book|title=On Some Symmetric Lightweight Cryptographic Designs|last=Agren|first=Martin|publisher=Dissertation, Lund University|year=2012|isbn=|location=|pages=38–39}}&lt;/ref&gt; for instance, by the paper on &quot;chosen-key-relations-in-the-middle&quot; attacks on AES-128 authored by Vincent Rijmen in 2010.&lt;ref&gt;{{cite web |url=http://eprint.iacr.org/2010/337.pdf |title=Practical-Titled Attack on AES-128 Using Chosen-Text Relations |author=Vincent Rijmen |date=2010}}&lt;/ref&gt;

In November 2009, the first [[known-key distinguishing attack]] against a reduced 8-round version of AES-128 was released as a preprint.&lt;ref&gt;{{cite web
|url=http://eprint.iacr.org/2009/531
|title=Super-Sbox Cryptanalysis: Improved Attacks for AES-like permutations
|author=Henri Gilbert
|author2=Thomas Peyrin
|date=2009-11-09
|accessdate=2010-03-11}}&lt;/ref&gt;
This known-key distinguishing attack is an improvement of the rebound, or the start-from-the-middle attack, against AES-like permutations, which view two consecutive rounds of permutation as the application of a so-called Super-Sbox. It works on the 8-round version of AES-128, with a time complexity of 2&lt;sup&gt;48&lt;/sup&gt;, and a memory complexity of 2&lt;sup&gt;32&lt;/sup&gt;.  128-bit AES uses 10 rounds, so this attack isn't effective against full AES-128.

The first [[key-recovery attack]]s on full AES were due to Andrey Bogdanov, Dmitry Khovratovich, and Christian Rechberger, and were published in 2011.&lt;ref&gt;{{cite web|url=http://research.microsoft.com/en-us/projects/cryptanalysis/aesbc.pdf |title=Biclique Cryptanalysis of the Full AES |author=Andrey Bogdanov |author2=Dmitry Khovratovich |author3=Christian Rechberger |last-author-amp=yes |date=2011 |deadurl=yes |archiveurl=https://web.archive.org/web/20120905154705/http://research.microsoft.com/en-us/projects/cryptanalysis/aesbc.pdf |archivedate=2012-09-05 |df= }}&lt;/ref&gt; The attack is a [[biclique attack]] and is faster than brute force by a factor of about four. It requires 2&lt;sup&gt;126.2&lt;/sup&gt; operations to recover an AES-128 key. For AES-192 and AES-256, 2&lt;sup&gt;190.2&lt;/sup&gt; and 2&lt;sup&gt;254.6&lt;/sup&gt; operations are needed, respectively. This result has been further improved to 2&lt;sup&gt;126.0&lt;/sup&gt; for AES-128, 2&lt;sup&gt;189.9&lt;/sup&gt; for AES-192 and 2&lt;sup&gt;254.3&lt;/sup&gt; for AES-256,&lt;ref name=&quot;:0&quot;&gt;{{cite web |url=https://link.springer.com/chapter/10.1007/978-3-319-19962-7_3 |title=Improving the Biclique Cryptanalysis of AES |author=Biaoshuai Tao |author2=Hongjun Wu |last-author-amp=yes |date=2015}}&lt;/ref&gt; which are the current best results in key recovery attack against AES.

This is a very small gain, as a 126-bit key (instead of 128-bits) would still take billions of years to brute force on current and foreseeable hardware. Also, the authors calculate the best attack using their technique on AES with a 128 bit key requires storing 2&lt;sup&gt;88&lt;/sup&gt; bits of data (though this has later been improved to 2&lt;sup&gt;56&lt;/sup&gt;,&lt;ref name=&quot;:0&quot;/&gt; which is 9 petabytes). That works out to about 38 trillion terabytes of data, which is more than all the data stored on all the computers on the planet in 2016. As such this is a seriously impractical attack which has no practical implication on AES security.&lt;ref&gt;{{cite web|author=Jeffrey Goldberg|title=AES Encryption isn't Cracked|url=https://blog.agilebits.com/2011/08/18/aes-encryption-isnt-cracked/|accessdate=30 December 2014}}&lt;/ref&gt;

According to the [[Edward Snowden#Global surveillance disclosures|Snowden documents]], the NSA is doing research on whether a cryptographic attack based on [[Kendall tau rank correlation coefficient|tau statistic]] may help to break AES.&lt;ref&gt;{{cite web|url=http://www.spiegel.de/international/germany/inside-the-nsa-s-war-on-internet-security-a-1010361.html|title=Inside the NSA's War on Internet Security|author=((SPIEGEL ONLINE, Hamburg, Germany))|date=28 December 2014|work=SPIEGEL ONLINE|accessdate=4 September 2015}}&lt;/ref&gt;

At present, there is no known practical attack that would allow someone without knowledge of the key to read data encrypted by AES when correctly implemented.

=== Side-channel attacks ===
&lt;!-- possibly out of date? --&gt;
[[Side-channel attacks]] do not attack the cipher as a [[black box]], and thus are not related to cipher security as defined in the classical context, but are important in practice. They attack implementations of the cipher on hardware or software systems that inadvertently leak data. There are several such known attacks on various implementations of AES.

In April 2005, [[Daniel J. Bernstein|D.J. Bernstein]] announced a cache-timing attack that he used to break a custom server that used [[OpenSSL]]'s AES encryption.&lt;ref name=&quot;bernstein_timing&quot;&gt;{{cite web|url=http://cr.yp.to/papers.html#cachetiming |title=Index of formal scientific papers |publisher=Cr.yp.to |accessdate=2008-11-02}}&lt;/ref&gt; The attack required over 200 million chosen plaintexts.&lt;ref&gt;{{cite web | url = http://www.schneier.com/blog/archives/2005/05/aes_timing_atta_1.html | title = AES Timing Attack | author = Bruce Schneier | accessdate = 2007-03-17| archiveurl= https://web.archive.org/web/20070212015727/http://www.schneier.com/blog/archives/2005/05/aes_timing_atta_1.html| archivedate= 12 February 2007 &lt;!--DASHBot--&gt;| deadurl= no}}&lt;/ref&gt; The custom server was designed to give out as much timing information as possible (the server reports back the number of machine cycles taken by the encryption operation); however, as Bernstein pointed out, &quot;reducing the precision of the server's timestamps, or eliminating them from the server's responses, does not stop the attack: the client simply uses round-trip timings based on its local clock, and compensates for the increased noise by averaging over a larger number of samples.&quot;&lt;ref name=&quot;bernstein_timing&quot; /&gt;

In October 2005, Dag Arne Osvik, [[Adi Shamir]] and Eran Tromer presented a paper demonstrating several cache-timing attacks against AES.&lt;ref&gt;{{cite journal|url=http://www.wisdom.weizmann.ac.il/~tromer/papers/cache.pdf |title=Cache Attacks and Countermeasures: the Case of AES |format=PDF |date=2005-11-20 |author=Dag Arne Osvik|author2=Adi Shamir|author3=Eran Tromer |accessdate=2008-11-02}}&lt;/ref&gt; One attack was able to obtain an entire AES key after only 800 operations triggering encryptions, in a total of 65 milliseconds. This attack requires the attacker to be able to run programs on the same system or platform that is performing AES.

In December 2009 an attack on some hardware implementations was published that used [[differential fault analysis]] and allows recovery of a key with a complexity of 2&lt;sup&gt;32&lt;/sup&gt;.&lt;ref&gt;{{cite journal|url=http://eprint.iacr.org/2009/581.pdf |title=A Diagonal Fault Attack on the Advanced Encryption Standard |author=Dhiman Saha |author2=Debdeep Mukhopadhyay |author3=Dipanwita RoyChowdhury |format=PDF |accessdate=2009-12-08| archiveurl= https://web.archive.org/web/20091222070135/http://eprint.iacr.org/2009/581.pdf| archivedate= 22 December 2009 &lt;!--DASHBot--&gt;| deadurl= no}}&lt;/ref&gt;

In November 2010 Endre Bangerter, David Gullasch and Stephan Krenn published a paper which described a practical approach to a &quot;near real time&quot; recovery of secret keys from AES-128 without the need for either cipher text or plaintext. The approach also works on AES-128 implementations that use compression tables, such as OpenSSL.&lt;ref&gt;{{cite web |url=http://eprint.iacr.org/2010/594.pdf |title=Cache Games – Bringing Access-Based Cache Attacks on AES to Practice |author=Endre Bangerter |author2=David Gullasch |author3=Stephan Krenn |last-author-amp=yes |date=2010}}&lt;/ref&gt;  Like some earlier attacks this one requires the ability to run unprivileged code on the system performing the AES encryption, which may be achieved by malware infection far more easily than commandeering the root account.&lt;ref&gt;{{cite web|url=http://news.ycombinator.com/item?id=1937902 |title=Breaking AES-128 in realtime, no ciphertext required {{!}} Hacker News |publisher=News.ycombinator.com |accessdate=2012-12-23}}&lt;/ref&gt;

In March 2016, Ashokkumar C., Ravi Prakash Giri and Bernard Menezes presented a very efficient side-channel attack on AES that can recover the complete 128-bit AES key in just 6–7 blocks of plaintext/ciphertext which is a substantial improvement over previous works that require between 100 and a million encryptions.&lt;ref&gt;{{cite web | title=Highly Efficient Algorithms for AES Key Retrieval in Cache Access Attacks | year=2016 | url=http://ieeexplore.ieee.org/document/7467359/ | author1=Ashokkumar C. | author2=Ravi Prakash Giri | author3=Bernard Menezes}}&lt;/ref&gt; The proposed attack require standard user privilege as previous attacks and key-retrieval algorithms run under a minute.

Many modern CPUs have built-in [[AES instruction set|hardware instructions for AES]], which would protect against timing-related side-channel attacks.&lt;ref&gt;{{cite web |url=https://cseweb.ucsd.edu/~kmowery/papers/aes-cache-timing.pdf |title=Are AES x86 Cache Timing Attacks Still Feasible? |website=cseweb.ucsd.edu}}&lt;/ref&gt;&lt;ref&gt;https://www.intel.in/content/dam/doc/white-paper/enterprise-security-aes-ni-white-paper.pdf Securing the Enterprise with Intel AES-NI&lt;/ref&gt;

== NIST/CSEC validation ==
The [[CMVP|Cryptographic Module Validation Program]] (CMVP) is operated jointly by the United States Government's [[National Institute of Standards and Technology]] (NIST) Computer Security Division and the [[Communications Security Establishment]] (CSE) of the Government of Canada. The use of cryptographic modules validated to NIST [[FIPS 140-2]] is required by the United States Government for encryption of all data that has a classification of Sensitive but Unclassified (SBU) or above. From NSTISSP #11, National Policy Governing the Acquisition of Information Assurance: &quot;Encryption products for protecting classified information will be certified by NSA, and encryption products intended for protecting sensitive information will be certified in accordance with NIST FIPS 140-2.&quot;&lt;ref name=&quot;cnss.gov&quot;&gt;http://www.cnss.gov/Assets/pdf/nstissp_11_fs.pdf&lt;/ref&gt;

The Government of Canada also recommends the use of [[FIPS 140]] validated cryptographic modules in unclassified applications of its departments.

Although NIST publication 197 (&quot;FIPS 197&quot;) is the unique document that covers the AES algorithm, vendors typically approach the CMVP under FIPS 140 and ask to have several algorithms (such as [[Triple DES|Triple&amp;nbsp;DES]] or [[SHA1]]) validated at the same time. Therefore, it is rare to find cryptographic modules that are uniquely FIPS 197 validated and NIST itself does not generally take the time to list FIPS 197 validated modules separately on its public web site. Instead, FIPS 197 validation is typically just listed as an &quot;FIPS approved: AES&quot; notation (with a specific FIPS 197 certificate number) in the current list of FIPS 140 validated cryptographic modules.

The Cryptographic Algorithm Validation Program (CAVP)&lt;ref&gt;{{cite web|url=http://csrc.nist.gov/groups/STM/cavp/index.html |title=NIST.gov – Computer Security Division – Computer Security Resource Center |publisher=Csrc.nist.gov |accessdate=2012-12-23}}&lt;/ref&gt; allows for independent validation of the correct implementation of the AES algorithm at a reasonable cost{{Citation needed|date=December 2010}}. Successful validation results in being listed on the NIST validations page.&lt;ref&gt;{{cite web|url=http://csrc.nist.gov/groups/STM/cmvp/documents/140-1/140val-all.htm|title=Validated FIPS 140-1 and FIPS 140-2 Cryptographic Modules}}&lt;/ref&gt; This testing is a pre-requisite for the FIPS 140-2 module validation described below. However, successful CAVP validation in no way implies that the cryptographic module implementing the algorithm is secure. A cryptographic module lacking FIPS 140-2 validation or specific approval by the NSA is not deemed secure by the US Government and cannot be used to protect government data.&lt;ref name=&quot;cnss.gov&quot;/&gt;

FIPS 140-2 validation is challenging to achieve both technically and fiscally.&lt;ref name=&quot;openssl&quot;&gt;{{cite web|author=OpenSSL, openssl@openssl.org |url=http://openssl.org/docs/fips/fipsnotes.html |title=OpenSSL's Notes about FIPS certification |publisher=Openssl.org |accessdate=2012-12-23}}&lt;/ref&gt; There is a standardized battery of tests as well as an element of source code review that must be passed over a period of a few weeks. The cost to perform these tests through an approved laboratory can be significant (e.g., well over $30,000 US)&lt;ref name=&quot;openssl&quot; /&gt; and does not include the time it takes to write, test, document and prepare a module for validation. After validation, modules must be re-submitted and re-evaluated if they are changed in any way. This can vary from simple paperwork updates if the security functionality did not change to a more substantial set of re-testing if the security functionality was impacted by the change.

== Test vectors ==
Test vectors are a set of known ciphers for a given input and key. [[NIST]] distributes the reference of AES test vectors as [http://csrc.nist.gov/groups/STM/cavp/documents/aes/KAT_AES.zip AES Known Answer Test (KAT) Vectors (in ZIP format)].

== Performance ==
High speed and low RAM requirements were criteria of the AES selection process. As the chosen algorithm, AES performed well on a wide variety of hardware, from 8-bit [[smart card]]s to high-performance computers.

On a [[Pentium Pro]], AES encryption requires 18 clock cycles per byte,&lt;ref&gt;{{cite web |url=http://www.schneier.com/paper-aes-performance.pdf |title=Performance Comparisons of the AES submissions |last1=Schneier |first1=Bruce |last2=Kelsey |first2=John |last3=Whiting |first3=Doug |last4=Wagner |first4=David |last5=Hall |first5=Chris |last6=Ferguson |first6=Niels |date=1999-02-01 |format=PDF |accessdate=2010-12-28}}&lt;/ref&gt; equivalent to a throughput of about 11&amp;nbsp;MB/s for a 200&amp;nbsp;MHz processor. On a 1.7&amp;nbsp;GHz [[Pentium M]] throughput is about 60&amp;nbsp;MB/s.

On Intel [[Core i3]]/[[Core i5|i5]]/[[Core i7|i7]] and [[AMD APU]] and [[AMD FX|FX]] CPUs supporting [[AES instruction set|AES-NI instruction set]] extensions, throughput can be over 700&amp;nbsp;MB/s.&lt;ref&gt;{{cite web |url=http://grantmcwilliams.com/tech/technology/387-hardware-aes-showdown-via-padlock-vs-intel-aes-ni-vs-amd-hexacore |title=Hardware AES Showdown – VIA Padlock vs. Intel AES-NI vs. AMD Hexacore |last=McWilliams |first=Grant |date=6 July 2011 |accessdate=2013-08-28}}&lt;/ref&gt;

== Implementations ==

{{Main article|AES implementations}}

== See also ==
*[[Block cipher]]
*[[Disk encryption]]
*[[Distributed Computing]]
*[[distributed.net]]
*[[Network encryption]]
*[[Rijndael key schedule]]
*[[Rijndael S-box]]
*[[Whirlpool (cryptography)|Whirlpool]] – hash function created by Vincent Rijmen and Paulo S. L. M. Barreto

== Notes ==
{{Reflist|30em}}

== References ==
* Nicolas Courtois, Josef Pieprzyk, &quot;Cryptanalysis of Block Ciphers with Overdefined Systems of Equations&quot;. pp267–287, [[ASIACRYPT]] 2002.
* Joan Daemen, Vincent Rijmen, &quot;The Design of Rijndael: AES – The Advanced Encryption Standard.&quot; Springer, 2002. {{ISBN|3-540-42580-2}}.
* Christof Paar, Jan Pelzl, [https://archive.is/20130105232834/http://wiki.crypto.rub.de/Buch/sample_chapters.php  &quot;The Advanced Encryption Standard&quot;], Chapter 4 of &quot;Understanding Cryptography, A Textbook for Students and Practitioners&quot;. (companion web site contains online lectures on AES), Springer, 2009.

== External links ==
* [http://embeddedsw.net/Cipher_Reference_Home.html 256bit Ciphers – AES Reference implementation and derived code]
* [http://doi.org/10.6028/NIST.FIPS.197 FIPS PUB 197: the official AES standard] ([[Portable Document Format|PDF]] file)
* [http://csrc.nist.gov/archive/aes/rijndael/wsdindex.html AES algorithm archive information – (old, unmaintained)]
* [http://webstore.iec.ch/preview/info_isoiec18033-3%7Bed2.0%7Den.pdf Preview of ISO/IEC 18033-3]
* [http://www.formaestudio.com/rijndaelinspector/archivos/Rijndael_Animation_v4_eng.swf Animation of Rijndael] – AES deeply explained and animated using Flash (by Enrique Zabala / University ORT / Montevideo / Uruguay). This animation (in English, Spanish, and German) is also part of [[CrypTool|CrypTool 1]] (menu Indiv. Procedures -&gt; Visualization of Algorithms -&gt; AES).

{{Cryptography navbox | block}}

[[Category:Advanced Encryption Standard| ]]</text>
<sha1>i0lo8mhrtk4yyiyj0tslrycyz9cms51</sha1>
</revision>
</page>
