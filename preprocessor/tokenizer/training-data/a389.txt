<page>
<title>Algorithms for calculating variance</title>
<ns>0</ns>
<id>1063</id>
<revision>
<id>797895999</id>
<parentid>794738542</parentid>
<timestamp>2017-08-29T20:08:35Z</timestamp>
<contributor>
<username>KolbertBot</username>
<id>31691822</id>
</contributor>
<minor />
<comment>Bot: [[Wikipedia:Bots/Requests for approval/KolbertBot|HTTP→HTTPS]]</comment>
<model>wikitext</model>
<format>text/x-wiki</format>
<text xml:space="preserve">'''Algorithms for calculating variance''' play a major role in [[computational statistics]]. A key difficulty in the design of good [[algorithm]]s for this problem is that formulas for the [[variance]] may involve sums of squares, which can lead to [[numerical instability]] as well as to [[arithmetic overflow]] when dealing with large values.

==Naïve algorithm==
A formula for calculating the variance of an entire [[statistical population|population]] of size ''N'' is:

:&lt;math&gt;\sigma^2 = \bar{(x^2)} - \bar x^2 = \displaystyle\frac {\sum_{i=1}^N x_i^2 - (\sum_{i=1}^N x_i)^2/N}{N}. \!&lt;/math&gt;

Using [[Bessel's correction]] to calculate an [[estimator bias|unbiased]] estimate of the population variance from a finite [[statistical sample|sample]] of ''n'' observations, the formula is:

:&lt;math&gt;s^2 = \displaystyle\frac {\sum_{i=1}^n x_i^2 - (\sum_{i=1}^n x_i)^2/n}{n-1}. \!&lt;/math&gt;

Therefore, a naive algorithm to calculate the estimated variance is given by the following:

&lt;div style=&quot;margin-left: 35px; width: 600px&quot;&gt;
{{framebox|blue}}
* Let {{math|''n'' ← 0, Sum ← 0, SumSq ← 0}}
* For each datum {{mvar|x}}:
** {{math|''n'' ← ''n'' + 1}}
** {{math|Sum ← Sum + ''x''}}
** {{math|SumSq ← SumSq + ''x'' × ''x''}}
* {{math|Var {{=}} (SumSq − (Sum × Sum) / n) / (n − 1)}}
{{frame-footer}}
&lt;/div&gt;

This algorithm can easily be adapted to compute the variance of a finite population: simply divide by ''N'' instead of ''n''&amp;nbsp;−&amp;nbsp;1 on the last line.

Because {{math|SumSq}} and {{math|(Sum×Sum)/''n''}} can be very similar numbers, [[Loss of significance|cancellation]] can lead to the [[precision (arithmetic)|precision]] of the result to be much less than the inherent precision of the [[floating-point arithmetic]] used to perform the computation.  Thus this algorithm should not be used in practice.&lt;ref name=&quot;Einarsson2005&quot;&gt;{{cite book|author=Bo Einarsson|title=Accuracy and Reliability in Scientific Computing|url=https://books.google.com/books?id=8hrDV5EbrEsC|accessdate=17 February 2013|date=1 August 2005|publisher=SIAM|isbn=978-0-89871-584-2|page=47}}&lt;/ref&gt;&lt;ref name=&quot;Chan1983&quot;&gt;{{cite journal|url=http://cpsc.yale.edu/sites/default/files/files/tr222.pdf|author=T.F.Chan, G.H. Golub and R.J. LeVeque|title=&quot;Algorithms for computing the sample variance: Analysis and recommendations&quot;, The American Statistician, 37|pages=242–247|year=1983}}&lt;/ref&gt; This is particularly bad if the standard deviation is small relative to the mean. However, the algorithm can be improved by adopting the method of the [[assumed mean]].

===Computing shifted data===

We can use a property of the variance to avoid the catastrophic cancellation in this formula,
namely the variance is [[Invariant (mathematics)|invariant]] with respect to changes in a [[location parameter]]

:&lt;math&gt;\operatorname{Var}(X-K)=\operatorname{Var}(X).&lt;/math&gt;

with &lt;math&gt;K&lt;/math&gt; any constant, which leads to the new formula

:&lt;math&gt;s^2 = \displaystyle\frac {\sum_{i=1}^n (x_i-K)^2 - (\sum_{i=1}^n (x_i-K))^2/n}{n-1}. \!&lt;/math&gt;

the closer &lt;math&gt;K&lt;/math&gt; is to the mean value the more accurate the result will be, but just choosing a value inside the
samples range will guarantee the desired stability. If the values &lt;math&gt;(x_i - K)&lt;/math&gt; are small then there are no problems with the sum of its squares, on the contrary, if they are large it necessarily means that the variance is large as well. In any case the second term in the formula is always smaller than the first one therefore no cancellation may occur.&lt;ref name=&quot;Chan1983&quot; /&gt;

If we take just the first sample as &lt;math&gt;K&lt;/math&gt; the algorithm can be written in [[Python (programming language)|Python programming language]] as

&lt;source lang=&quot;python&quot;&gt;
def shifted_data_variance(data):
if not data:
return 0
K = data[0]
n = Ex = Ex2 = 0
for x in data:
n = n + 1
Ex += x - K
Ex2 += (x - K) * (x - K)
variance = (Ex2 - (Ex * Ex)/n)/(n - 1)
# use n instead of (n-1) if want to compute the exact variance of the given data
# use (n-1) if data are samples of a larger population
return variance
&lt;/source&gt;
this formula facilitates as well the incremental computation, that can be expressed as
&lt;source lang=&quot;python&quot;&gt;
K = n = Ex = Ex2 = 0

def add_variable(x):
if (n == 0):
K = x
n = n + 1
Ex += x - K
Ex2 += (x - K) * (x - K)

def remove_variable(x):
n = n - 1
Ex -= (x - K)
Ex2 -= (x - K) * (x - K)

def get_meanvalue():
return K + Ex / n

def get_variance():
return (Ex2 - (Ex*Ex)/n) / (n-1)
&lt;/source&gt;

==Two-pass algorithm==
An alternative approach, using a different formula for the variance, first computes the sample mean,
:&lt;math&gt;\bar x = \displaystyle \frac {\sum_{j=1}^n x_j}{n}&lt;/math&gt;,
and then computes the sum of the squares of the differences from the mean,
:&lt;math&gt;\mathrm{variance} = s^2 = \displaystyle\frac {\sum_{i=1}^n (x_i - \bar x)^2}{n-1} \!&lt;/math&gt;,
where s is the standard deviation.  This is given by the following pseudocode:

&lt;source lang=&quot;python&quot;&gt;
def two_pass_variance(data):
n = sum1 = sum2 = 0

for x in data:
n += 1
sum1 += x

mean = sum1 / n

for x in data:
sum2 += (x - mean)*(x - mean)

variance = sum2 / (n - 1)
return variance
&lt;/source&gt;

This algorithm is numerically stable if ''n'' is small.&lt;ref name=&quot;Einarsson2005&quot;/&gt;&lt;ref&gt;{{cite book|first=Nicholas | last=Higham |title=Accuracy and Stability of Numerical Algorithms (2 ed) (Problem 1.10)| publisher=SIAM|year=2002}}&lt;/ref&gt; However, the results of both of these simple algorithms (&quot;Naïve&quot; and &quot;Two-pass&quot;) can depend inordinately on the ordering of the data and can give poor results for very large data sets due to repeated roundoff error in the accumulation of the sums. Techniques such as [[compensated summation]] can be used to combat this error to a degree.

==Online algorithm==
It is often useful to be able to compute the variance in a single pass, inspecting each value &lt;math&gt;x_i&lt;/math&gt; only once; for example, when the data are being collected without enough storage to keep all the values, or when costs of memory access dominate those of computation.  For such an [[online algorithm]], a [[recurrence relation]] is required between quantities from which the required statistics can be calculated in a numerically stable fashion.

The following formulas can be used to update the [[mean]] and (estimated) variance of the sequence, for an additional element ''x''&lt;sub&gt;''n''&lt;/sub&gt;. Here, {{overline|''x''}}&lt;sub&gt;''n''&lt;/sub&gt; denotes the sample mean of the first ''n'' samples (''x''&lt;sub&gt;1&lt;/sub&gt;, ..., ''x&lt;sub&gt;n&lt;/sub&gt;''), ''s''&lt;sup&gt;2&lt;/sup&gt;&lt;sub&gt;''n''&lt;/sub&gt; their sample variance, and ''σ''&lt;sup&gt;2&lt;/sup&gt;&lt;sub&gt;''n''&lt;/sub&gt; their population variance.

:&lt;math&gt;\bar x_n = \frac{(n-1) \, \bar x_{n-1} + x_n}{n} = \bar x_{n-1} + \frac{x_n - \bar x_{n-1}}{n} \!&lt;/math&gt;

:&lt;math&gt;s^2_n = \frac{(n-2)}{(n-1)} \, s^2_{n-1} + \frac{(x_n - \bar x_{n-1})^2}{n}, \quad n&gt;1 &lt;/math&gt;

:&lt;math&gt;\sigma^2_n = \frac{(n-1) \, \sigma^2_{n-1} + (x_n - \bar x_{n-1})(x_n - \bar x_{n})}{n}.&lt;/math&gt;

These formulas suffer from numerical instability. A better quantity for updating is the sum of squares of differences from the current mean, &lt;math&gt;\textstyle\sum_{i=1}^n (x_i - \bar x_n)^2&lt;/math&gt;, here denoted &lt;math&gt;M_{2,n}&lt;/math&gt;:

:&lt;math&gt;M_{2,n}\! = M_{2,n-1} + (x_n - \bar x_{n-1})(x_n - \bar x_n)&lt;/math&gt;
:&lt;math&gt;s^2_n = \frac{M_{2,n}}{n-1}&lt;/math&gt;
:&lt;math&gt;\sigma^2_n = \frac{M_{2,n}}{n}&lt;/math&gt;

A numerically stable algorithm for the sample variance is given below.  It also computes the mean.
This algorithm was found by Welford,&lt;ref&gt;B. P. Welford (1962).[https://www.jstor.org/stable/1266577 &quot;Note on a method for calculating corrected sums of squares and products&quot;]. ''[[Technometrics]]'' 4(3):419–420.&lt;/ref&gt;&lt;ref&gt;[[Donald E. Knuth]] (1998). ''[[The Art of Computer Programming]]'', volume 2: ''Seminumerical Algorithms'', 3rd edn., p.&amp;nbsp;232. Boston: Addison-Wesley.&lt;/ref&gt; and it has been thoroughly analyzed.&lt;ref&gt;Chan, Tony F.; Golub, Gene H.; LeVeque, Randall J. (1983). Algorithms for Computing the Sample Variance: Analysis and Recommendations. The American Statistician 37, 242-247. https://www.jstor.org/stable/2683386&lt;/ref&gt;&lt;ref&gt;Ling, Robert F. (1974). Comparison of Several Algorithms for Computing Sample Means and Variances. Journal of the American Statistical Association, Vol. 69, No. 348, 859-866. {{doi|10.2307/2286154}}&lt;/ref&gt; It is also common to denote &lt;math&gt;M_k = \bar x_k&lt;/math&gt; and &lt;math&gt;S_k = M_{2,k}&lt;/math&gt;.&lt;ref&gt;http://www.johndcook.com/standard_deviation.html&lt;/ref&gt;

&lt;source lang=&quot;python&quot;&gt;
def online_variance(data):
n = 0
mean = M2 = 0.0

for x in data:
n += 1
delta = x - mean
mean += delta/n
delta2 = x - mean
M2 += delta*delta2

if n &lt; 2:
return float('nan')
else:
return M2 / (n - 1)
&lt;/source&gt;

This algorithm is much less prone to loss of precision due to [[catastrophic cancellation]], but might not be as efficient because of the division operation inside the loop.  For a particularly robust two-pass algorithm for computing the variance, one can first compute and subtract an estimate of the mean, and then use this algorithm on the residuals.

The [[Algorithms for calculating variance#Parallel algorithm|parallel algorithm]] below illustrates how to merge multiple sets of statistics calculated online.

==Weighted incremental algorithm==
The algorithm can be extended to handle unequal sample weights, replacing the simple counter ''n'' with the sum of weights seen so far.  West (1979)&lt;ref&gt;D. H. D. West (1979). ''[[Communications of the ACM]]'', 22, 9, 532-535: ''Updating Mean and Variance Estimates: An Improved Method''&lt;/ref&gt; suggests this [[incremental algorithm]]:

&lt;source lang=&quot;python&quot;&gt;
def weighted_incremental_variance(dataWeightPairs):
wSum = wSum2 = mean = S = 0

for x, w in dataWeightPairs:  # Alternatively &quot;for x, w in zip(data, weights):&quot;
wSum = wSum + w
wSum2 = wSum2 + w*w
meanOld = mean
mean = meanOld + (w / wSum) * (x - meanOld)
S = S + w * (x - meanOld) * (x - mean)

population_variance = S / wSum
# Bessel's correction for weighted samples
# Frequency weights
sample_frequency_variance = S / (wSum - 1)
# Reliability weights
sample_reliability_variance = S / (wSum - wSum2/wSum)
&lt;/source&gt;

{{further|Weighted arithmetic mean#Weighted sample variance}}

==Parallel algorithm==
Chan et al.&lt;ref name=&quot;:0&quot;&gt;{{Citation
| last1 = Chan     | first1 = Tony F.      | author1-link = Tony F. Chan
| last2 = Golub    | first2 = Gene H.      | author2-link = Gene H. Golub
| last3 = LeVeque  | first3 = Randall J.
| contribution = Updating Formulae and a Pairwise Algorithm for Computing Sample Variances.
| title = Technical Report STAN-CS-79-773
| publisher = Department of Computer Science, Stanford University
| year = 1979
| contribution-url =http://i.stanford.edu/pub/cstr/reports/cs/tr/79/773/CS-TR-79-773.pdf }}.&lt;/ref&gt; note that the above &quot;On-line&quot; algorithm is a special case of an algorithm that works for any partition of the sample &lt;math&gt;X&lt;/math&gt; into sets &lt;math&gt;X_A&lt;/math&gt;, &lt;math&gt;X_B&lt;/math&gt;:
:&lt;math&gt;\delta\! = \bar x_B - \bar x_A&lt;/math&gt;
:&lt;math&gt;\bar x_X = \bar x_A + \delta\cdot\frac{n_B}{n_X}&lt;/math&gt;
:&lt;math&gt;M_{2,X} = M_{2,A} + M_{2,B} + \delta^2\cdot\frac{n_A n_B}{n_X}&lt;/math&gt;.
This may be useful when, for example, multiple processing units may be assigned to discrete parts of the input.

Chan's method for estimating the mean is numerically unstable when &lt;math&gt;n_A \approx n_B&lt;/math&gt; and both are large, because the numerical error in &lt;math&gt;\bar x_B - \bar x_A&lt;/math&gt; is not scaled down in the way that it is in the &lt;math&gt;n_B = 1&lt;/math&gt; case. In such cases, prefer &lt;math&gt;\bar x_X = \frac{n_A \bar x_A + n_B \bar x_B}{n_A + n_B}&lt;/math&gt;.&lt;syntaxhighlight lang=&quot;python&quot;&gt;
def parallel_variance(avg_a, count_a, var_a, avg_b, count_b, var_b):
delta = avg_b - avg_a
m_a = var_a * (count_a - 1)
m_b = var_b * (count_b - 1)
M2 = m_a + m_b + delta ** 2 * count_a * count_b / (count_a + count_b)
return M2 / (count_a + count_b - 1)
&lt;/syntaxhighlight&gt;

==Example==
Assume that all floating point operations use the standard [[IEEE 754#Double-precision 64 bit|IEEE 754 double-precision]] arithmetic. Consider the sample (4, 7, 13, 16) from an infinite population. Based on this sample, the estimated population mean is 10, and the unbiased estimate of population variance is 30.  Both &quot;Naïve&quot; algorithm and &quot;Two-pass&quot; algorithm compute these values correctly.  Next consider the sample ({{nowrap|10&lt;sup&gt;8&lt;/sup&gt;&amp;nbsp;+&amp;nbsp;4}}, {{nowrap|10&lt;sup&gt;8&lt;/sup&gt;&amp;nbsp;+&amp;nbsp;7}}, {{nowrap|10&lt;sup&gt;8&lt;/sup&gt;&amp;nbsp;+&amp;nbsp;13}}, {{nowrap|10&lt;sup&gt;8&lt;/sup&gt;&amp;nbsp;+&amp;nbsp;16}}), which gives rise to the same estimated variance as the first sample.  &quot;Two-pass&quot; algorithm computes this variance estimate correctly, but &quot;Naïve&quot; algorithm returns 29.333333333333332 instead of 30.  While this loss of precision may be tolerable and viewed as a minor flaw of &quot;Naïve&quot; algorithm, it is easy to find data that reveal a major flaw in the naive algorithm: Take the sample to be ({{nowrap|10&lt;sup&gt;9&lt;/sup&gt;&amp;nbsp;+&amp;nbsp;4}}, {{nowrap|10&lt;sup&gt;9&lt;/sup&gt;&amp;nbsp;+&amp;nbsp;7}}, {{nowrap|10&lt;sup&gt;9&lt;/sup&gt;&amp;nbsp;+&amp;nbsp;13}}, {{nowrap|10&lt;sup&gt;9&lt;/sup&gt;&amp;nbsp;+&amp;nbsp;16}}).  Again the estimated population variance of 30 is computed correctly by &quot;Two-pass&quot;&quot; algorithm, but &quot;Naïve&quot; algorithm now computes it as −170.66666666666666.  This is a serious problem with &quot;Naïve&quot; algorithm and is due to [[catastrophic cancellation]] in the subtraction of two similar numbers at the final stage of the algorithm.

==Higher-order statistics==
Terriberry&lt;ref&gt;{{Citation
| last=Terriberry
| first=Timothy B.
| year=2007
| title=Computing Higher-Order Moments Online
| url=http://people.xiph.org/~tterribe/notes/homs.html
}}&lt;/ref&gt; extends Chan's formulae to calculating the third and fourth [[central moment]]s, needed for example when estimating [[skewness]] and [[kurtosis]]:
:&lt;math&gt;M_{3,X} = M_{3,A} + M_{3,B} + \delta^3\frac{n_A n_B (n_A - n_B)}{n_X^2} + 3\delta\frac{n_AM_{2,B} - n_BM_{2,A}}{n_X}&lt;/math&gt;
:&lt;math&gt;\begin{align}
M_{4,X} = M_{4,A} + M_{4,B} &amp; {} + \delta^4\frac{n_A n_B \left(n_A^2 - n_A n_B + n_B^2\right)}{n_X^3} \\
&amp; {} + 6\delta^2\frac{n_A^2 M_{2,B} + n_B^2 M_{2,A}}{n_X^2} + 4\delta\frac{n_AM_{3,B} - n_BM_{3,A}}{n_X} \\
\end{align}&lt;/math&gt;

Here the &lt;math&gt;M_k&lt;/math&gt; are again the sums of powers of differences from the mean &lt;math&gt;\Sigma(x - \overline{x})^k&lt;/math&gt;, giving
:skewness: &lt;math&gt;g_1 = \frac{\sqrt{n} M_3}{M_2^{3/2}},&lt;/math&gt;
:kurtosis: &lt;math&gt;g_2 = \frac{n M_4}{M_2^2}-3.&lt;/math&gt;

For the incremental case (i.e., &lt;math&gt;B = \{x\}&lt;/math&gt;), this simplifies to:
:&lt;math&gt;\delta\! = x - m&lt;/math&gt;
:&lt;math&gt;m' = m + \frac{\delta}{n}&lt;/math&gt;
:&lt;math&gt;M_2' = M_2 + \delta^2 \frac{ n-1}{n}&lt;/math&gt;

:&lt;math&gt;M_3' = M_3 + \delta^3 \frac{ (n - 1) (n - 2)}{n^2} - \frac{3\delta M_2}{n}&lt;/math&gt;

:&lt;math&gt;M_4' = M_4 + \frac{\delta^4 (n - 1) (n^2 - 3n + 3)}{n^3} + \frac{6\delta^2 M_2}{n^2} - \frac{4\delta M_3}{n}&lt;/math&gt;

By preserving the value &lt;math&gt;\delta / n&lt;/math&gt;, only one division operation is needed and the higher-order statistics can thus be calculated for little incremental cost.

An example of the online algorithm for kurtosis implemented as described is:
&lt;source lang=&quot;python&quot;&gt;
def online_kurtosis(data):
n = mean = M2 = M3 = M4 = 0

for x in data:
n1 = n
n = n + 1
delta = x - mean
delta_n = delta / n
delta_n2 = delta_n * delta_n
term1 = delta * delta_n * n1
mean = mean + delta_n
M4 = M4 + term1 * delta_n2 * (n*n - 3*n + 3) + 6 * delta_n2 * M2 - 4 * delta_n * M3
M3 = M3 + term1 * delta_n * (n - 2) - 3 * delta_n * M2
M2 = M2 + term1

kurtosis = (n*M4) / (M2*M2) - 3
return kurtosis
&lt;/source&gt;

Pébaÿ&lt;ref&gt;{{Citation
| last=Pébaÿ
| first=Philippe
| year=2008
| contribution=Formulas for Robust, One-Pass Parallel Computation of Covariances and Arbitrary-Order Statistical Moments
| title=Technical Report SAND2008-6212
| publisher=Sandia National Laboratories
| contribution-url=http://infoserve.sandia.gov/sand_doc/2008/086212.pdf
}}&lt;/ref&gt;
further extends these results to arbitrary-order [[central moment]]s, for the incremental and the pairwise cases, and subsequently Pébaÿ et al.&lt;ref&gt;{{Citation
| last1=Pébaÿ
| first1=Philippe
| last2=Terriberry
| first2=Timothy
| last3=Kolla
| first3=Hemanth
| last4=Bennett
| first4=Janine
| year=2016
| title=Numerically Stable, Scalable Formulas for Parallel and Online Computation of Higher-Order Multivariate Central Moments with Arbitrary Weights
| journal=Computational Statistics
| publisher=Springer
| url=http://doi.org/10.1007/s00180-015-0637-z
}}&lt;/ref&gt;
for weighted and compound moments. One can also find there similar formulas for [[covariance]].

Choi and Sweetman
&lt;ref name=&quot;Choi2010&quot;&gt;{{Citation
| last1 = Choi      | first1 = Muenkeun
| last2 = Sweetman  | first2 = Bert
| year=2010
| title=Efficient Calculation of Statistical Moments for Structural Health Monitoring
| url=http://www.rms-group.org/RMS_Papers/TAMUG_Papers/MK/Efficient_Moments_2010.pdf
}}&lt;/ref&gt;
offer two alternative methods to compute the skewness and kurtosis, each of which can save substantial computer memory requirements and CPU time in certain applications. The first approach is to compute the statistical moments by separating the data into bins and then computing the moments from the geometry of the resulting histogram, which effectively becomes a [[one-pass algorithm]] for higher moments. One benefit is that the statistical moment calculations can be carried out to arbitrary accuracy such that the computations can be tuned to the precision of, e.g., the data storage format or the original measurement hardware.  A relative histogram of a random variable can be constructed in
the conventional way: the range of potential values is
divided into bins and the number of occurrences within each bin are
counted and plotted such that the area of each rectangle equals
the portion of the sample values within that bin:

: &lt;math&gt; H(x_k)=\frac{h(x_k)}{A}&lt;/math&gt;

where &lt;math&gt;h(x_k)&lt;/math&gt; and &lt;math&gt;H(x_k)&lt;/math&gt; represent the frequency and
the relative frequency at bin &lt;math&gt;x_k&lt;/math&gt; and &lt;math&gt;A= \sum_{k=1}^{K} h(x_k)
\,\Delta x_k&lt;/math&gt; is the total area of the histogram. After this
normalization, the &lt;math&gt;n&lt;/math&gt; raw moments and central moments of &lt;math&gt;x(t)&lt;/math&gt;
can be calculated from the relative histogram:

: &lt;math&gt;
m_n^{(h)} = \sum_{k=1}^{K}  x_k^n \, H(x_k) \Delta x_k
= \frac{1}{A} \sum_{k=1}^{K}  x_k^n \, h(x_k) \Delta x_k
&lt;/math&gt;

: &lt;math&gt;
\theta_n^{(h)}= \sum_{k=1}^{K} \Big(x_k-m_1^{(h)}\Big)^n \, H(x_k)\Delta x_k
= \frac{1}{A} \sum_{k=1}^{K} \Big(x_k-m_1^{(h)}\Big)^n \, h(x_k) \Delta x_k
&lt;/math&gt;

where the superscript &lt;math&gt;^{(h)}&lt;/math&gt; indicates the moments are
calculated from the histogram. For constant bin width &lt;math&gt;\Delta
x_k=\Delta x&lt;/math&gt; these two expressions can be simplified using &lt;math&gt;I= A/\Delta x&lt;/math&gt;:

: &lt;math&gt;
m_n^{(h)}= \frac{1}{I} {\sum_{k=1}^{K} x_k^n \, h(x_k)}
&lt;/math&gt;

: &lt;math&gt;
\theta_n^{(h)}= \frac{1}{I}{\sum_{k=1}^{K} \Big(x_k-m_1^{(h)}\Big)^n \, h(x_k)}
&lt;/math&gt;

The second approach from Choi and Sweetman
&lt;ref name=&quot;Choi2010&quot; /&gt;
is an analytical methodology to combine statistical moments from individual segments of a time-history such that the resulting overall moments are those of the complete time-history. This methodology could be used for parallel computation of statistical moments with subsequent combination of those moments, or for combination of statistical moments computed at sequential times.

If &lt;math&gt;Q&lt;/math&gt; sets of statistical moments are known:
&lt;math&gt;(\gamma_{0,q},\mu_{q},\sigma^2_{q},\alpha_{3,q},\alpha_{4,q})
\quad &lt;/math&gt; for &lt;math&gt;q=1,2,\ldots,Q &lt;/math&gt;, then each &lt;math&gt;\gamma_n&lt;/math&gt; can
be expressed in terms of the equivalent &lt;math&gt;n&lt;/math&gt; raw moments:

: &lt;math&gt;
\gamma_{n,q}= m_{n,q} \gamma_{0,q} \qquad \quad \textrm{for} \quad n=1,2,3,4  \quad \text{ and } \quad q = 1,2, \dots ,Q
&lt;/math&gt;

where &lt;math&gt;\gamma_{0,q}&lt;/math&gt; is generally taken to be the duration of the &lt;math&gt;q^{th}&lt;/math&gt; time-history, or the number of points if &lt;math&gt;\Delta t&lt;/math&gt; is constant.

The benefit of expressing the statistical moments in terms of &lt;math&gt;\gamma&lt;/math&gt; is that the &lt;math&gt;Q&lt;/math&gt; sets can be combined by addition, and there is no upper limit on the value of &lt;math&gt;Q&lt;/math&gt;.

: &lt;math&gt;
\gamma_{n,c}= \sum_{q=1}^Q \gamma_{n,q} \quad \quad \textrm{for} \quad n=0,1,2,3,4
&lt;/math&gt;

where the subscript &lt;math&gt;_c&lt;/math&gt; represents the concatenated time-history or combined &lt;math&gt;\gamma&lt;/math&gt;. These combined values of &lt;math&gt;\gamma&lt;/math&gt; can then be inversely transformed into raw moments representing the complete concatenated time-history

: &lt;math&gt;
m_{n,c}=\frac{\gamma_{n,c}}{\gamma_{0,c}} \quad \textrm{for} \quad n=1,2,3,4
&lt;/math&gt;

Known relationships between the raw moments (&lt;math&gt;m_n&lt;/math&gt;) and the central moments  (&lt;math&gt; \theta_n = E[(x-\mu)^n])&lt;/math&gt;)
are then used to compute the central moments of the concatenated time-history.  Finally, the statistical moments of the concatenated history are computed from the central moments:

: &lt;math&gt;
\mu_c=m_{1,c}
\qquad \sigma^2_c=\theta_{2,c}
\qquad \alpha_{3,c}=\frac{\theta_{3,c}}{\sigma_c^3}
\qquad \alpha_{4,c}={\frac{\theta_{4,c}}{\sigma_c^4}}-3
&lt;/math&gt;

==Covariance==
Very similar algorithms can be used to compute the [[covariance]].  The naive algorithm is:
:&lt;math&gt;\operatorname{Cov}(X,Y) = \displaystyle\frac {\sum_{i=1}^n x_i y_i - (\sum_{i=1}^n x_i)(\sum_{i=1}^n y_i)/n}{n}. \!&lt;/math&gt;

For the algorithm above, one could use the following Python code:
&lt;source lang=&quot;python&quot;&gt;
def naive_covariance(data1, data2):
n = len(data1)
sum12 = 0
sum1 = sum(data1)
sum2 = sum(data2)

for i1, i2 in zip(data1, data2):
sum12 += i1*i2

covariance = (sum12 - sum1*sum2 / n) / n
return covariance
&lt;/source&gt;

As for the variance, the covariance of two random variables is also shift-invariant, so given that  &lt;math&gt;K_x&lt;/math&gt; and &lt;math&gt;K_y&lt;/math&gt; are whatever two constant values it can be written:

:&lt;math&gt;\operatorname{Cov}(X,Y) = \operatorname{Cov}(X-k_x,Y-k_y) = \displaystyle\frac {\sum_{i=1}^n (x_i-K_x) (y_i-K_y) - (\sum_{i=1}^n (x_i-K_x))(\sum_{i=1}^n (y_i-K_y))/n}{n}. \!&lt;/math&gt;

and again choosing a value inside the range of values will stabilize the formula against catastrophic cancellation as well as make it more robust against big sums. Taking the first value of each data set, the algorithm can be written as:

&lt;source lang=&quot;python&quot;&gt;
def shifted_data_covariance(dataX, dataY):
n = len(dataX)
if (n &lt; 2):
return 0
Kx = dataX[0]
Ky = dataY[0]
Ex = Ey = Exy = 0
for iX, iY in zip(dataX, dataY):
Ex += iX - Kx
Ey += iY - Ky
Exy += (iX - Kx) * (iY - Ky)
return (Exy - Ex * Ey / n) / n
&lt;/source&gt;

The two-pass algorithm first computes the sample means, and then the covariance:
:&lt;math&gt;\bar x = \displaystyle \sum_{i=1}^n x_i/n&lt;/math&gt;
:&lt;math&gt;\bar y = \displaystyle \sum_{i=1}^n y_i/n&lt;/math&gt;
:&lt;math&gt;\operatorname{Cov}(X,Y) = \displaystyle\frac {\sum_{i=1}^n (x_i - \bar x)(y_i - \bar y)}{n}. \!&lt;/math&gt;

The two-pass algorithm may be written as:
&lt;source lang=&quot;python&quot;&gt;
def two_pass_covariance(data1, data2):
n = len(data1)

mean1 = sum(data1) / n
mean2 = sum(data2) / n

covariance = 0

for i1, i2 in zip(data1, data2):
a = i1 - mean1
b = i2 - mean2
covariance += a*b / n
return covariance
&lt;/source&gt;

A slightly more accurate compensated version performs the full naive algorithm on the residuals.  The final sums &lt;math&gt;\textstyle\sum x_i&lt;/math&gt; and &lt;math&gt;\textstyle\sum y_i&lt;/math&gt; ''should'' be zero, but the second pass compensates for any small error.

A slight modification of the online algorithm for computing the variance yields an online algorithm for the covariance:

&lt;source lang=&quot;python&quot;&gt;
def online_covariance(data1, data2):
meanx = meany = C = n = 0
for x, y in zip(data1, data2):
n += 1
dx = x - meanx
meanx += dx / n
meany += (y - meany) / n
C += dx * (y - meany)

population_covar = C / n
# Bessel's correction for sample variance
sample_covar = C / (n - 1)
&lt;/source&gt;

We can also make a small modification to compute the weighted covariance:

&lt;source lang=&quot;python&quot;&gt;
def online_weighted_covariance(data1, data2, data3):
meanx = meany = 0
wsum = wsum2 = 0
C = 0
for x, y, w in zip(data1, data2, data3):
wsum += w
wsum2 += w*w
dx = x - meanx
meanx += (w / wsum) * dx
meany += (w / wsum) * (y - meany)
C += w * dx * (y - meany)

population_covar = C / wsum
# Bessel's correction for sample variance
# Frequency weights
sample_frequency_covar = C / (wsum - 1)
# Reliability weights
sample_reliability_covar = C / (wsum - wsum2 / wsum)
&lt;/source&gt;

A stable one-pass algorithm exists, similar to the one above, that computes co-moment &lt;math&gt;\textstyle C_n = \sum_{i=1}^n (x_i - \bar x_n)(y_i - \bar y_n)&lt;/math&gt;:
:&lt;math&gt;\bar x_n = \bar x_{n-1} + \frac{x_n - \bar x_{n-1}}{n} \!&lt;/math&gt;
:&lt;math&gt;\bar y_n = \bar y_{n-1} + \frac{y_n - \bar y_{n-1}}{n} \!&lt;/math&gt;
:&lt;math&gt;C_n = C_{n-1} + (x_n - \bar x_n)(y_n - \bar y_{n-1}) = C_{n-1} + (y_n - \bar y_n)(x_n - \bar x_{n-1})&lt;/math&gt;
The apparent asymmetry in that last equation is due to the fact that &lt;math&gt;\textstyle (x_n - \bar x_n) = \frac{n-1}{n}(x_n - \bar x_{n-1})&lt;/math&gt;, so both update terms are equal to &lt;math&gt;\textstyle \frac{n-1}{n}(x_n - \bar x_{n-1})(y_n - \bar y_{n-1})&lt;/math&gt;.  Even greater accuracy can be achieved by first computing the means, then using the stable one-pass algorithm on the residuals.

Thus we can compute the covariance as
:&lt;math&gt;\begin{align}
\operatorname{Cov}_N(X,Y) = \frac{C_N}{N} &amp;= \frac{\operatorname{Cov}_{N-1}(X,Y)\cdot(N-1) + (x_n - \bar x_n)(y_n - \bar y_{n-1})}{N}\\
&amp;= \frac{\operatorname{Cov}_{N-1}(X,Y)\cdot(N-1) + (y_n - \bar y_n)(x_n - \bar x_{n-1})}{N}\\
&amp;= \frac{\operatorname{Cov}_{N-1}(X,Y)\cdot(N-1) + \frac{N-1}{N}(x_n - \bar x_{n-1})(y_n - \bar y_{n-1})}{N}.
\end{align}&lt;/math&gt;

Likewise, there is a formula for combining the covariances of two sets that can be used to parallelize the computation:
:&lt;math&gt;C_X = C_A + C_B + (\bar x_A - \bar x_B)(\bar y_A - \bar y_B)\cdot\frac{n_A n_B}{n_X}. &lt;/math&gt;

==See also==
*[[Algebraic formula for the variance]]
*[[Kahan summation algorithm]]
*[[Squared deviations from the mean]]

==References==
&lt;references /&gt;

==External links==
* {{MathWorld|title=Sample Variance Computation|urlname=SampleVarianceComputation}}
{{Use dmy dates|date=March 2017}}

{{DEFAULTSORT:Algorithms For Calculating Variance}}
[[Category:Statistical algorithms]]
[[Category:Statistical deviation and dispersion]]
[[Category:Articles with example pseudocode]]
[[Category:Articles with example Python code]]</text>
<sha1>053yz3az7l8qn0ez95tgoeihifvqcm4</sha1>
</revision>
</page>
