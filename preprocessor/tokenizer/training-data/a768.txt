<page>
<title>Kolmogorov complexity</title>
<ns>0</ns>
<id>1635</id>
<revision>
<id>799254008</id>
<parentid>799242109</parentid>
<timestamp>2017-09-06T16:15:16Z</timestamp>
<contributor>
<username>Jochen Burghardt</username>
<id>17350134</id>
</contributor>
<comment>/* Chaitin's incompleteness theorem */ better use 'Kolmogorov complexity', to distinguish from aprroximation programs prog1, prog2</comment>
<model>wikitext</model>
<format>text/x-wiki</format>
<text xml:space="preserve">{{distinguish|Descriptive complexity theory}}
[[Image:Mandelpart2 red.png|right|thumb|upright=1.4|This image illustrates part of the [[Mandelbrot set]] [[fractal]]. Simply storing the 24-bit color of each pixel in this image would require 1.62 million bits, but a small computer program can reproduce these 1.62 million bits using the definition of the Mandelbrot set and the coordinates of the corners of the image. Thus, the Kolmogorov complexity of the raw file encoding this bitmap is much less than 1.62 million bits in any pragmatic model of computation.]]

In [[algorithmic information theory]] (a subfield of [[computer science]] and [[mathematics]]), the '''Kolmogorov complexity''' of an object, such as a piece of text, is the length of the shortest [[computer program]] (in a predetermined [[programming language]]) that produces the object as output.
It is a measure of the [[computation]]al resources needed to specify the object, and is also known as '''descriptive complexity''', '''Kolmogorov–[[Gregory Chaitin|Chaitin]] complexity''', '''algorithmic entropy''', or '''program-size complexity'''. It is named after [[Andrey Kolmogorov]], who first published on the subject in 1963.&lt;ref&gt;{{cite journal|authorlink=Andrey Kolmogorov|first=Andrey|last=Kolmogorov|year=1963|title=On Tables of Random Numbers| journal=[[Sankhya (journal)|Sankhyā]] Ser. A.|volume=25|pages=369–375|mr=178484}}&lt;/ref&gt;&lt;ref&gt;{{cite journal|authorlink=Andrey Kolmogorov|first=Andrey|last=Kolmogorov|year=1998|title=On Tables of Random Numbers| journal=Theoretical Computer Science|volume=207|issue=2|pages=387–395|doi=10.1016/S0304-3975(98)00075-9 |mr=1643414}}&lt;/ref&gt;

The notion of Kolmogorov complexity can be used to state and [[Proof of impossibility|prove impossibility]] results akin to [[Cantor's diagonal argument]], [[Gödel's incompleteness theorem]], and [[halting problem|Turing's halting problem]].
In particular, for almost each object it is not possible to compute even a lower bound for its Kolmogorov complexity ([[#Chaitin's incompleteness theorem|Chaitin 1964]]), let alone its exact value.

==Definition==
Consider the following two [[string (computer science)|strings]] of 32 lowercase letters and digits:

&lt;pre&gt;abababababababababababababababab&lt;/pre&gt;
&lt;pre&gt;4c1j5b2p0cv4w1x8rx2y39umgw5q85s7&lt;/pre&gt;

The first string has a short English-language description, namely &quot;&lt;tt&gt;ab 16 times&lt;/tt&gt;&quot;, which consists of '''11''' characters. The second one has no obvious simple description (using the same character set) other than writing down the string itself, which has '''32''' characters.

More formally, the [[complexity]] of a string is the length of the shortest possible description of the string in some fixed [[Turing complete|universal]] description language (the sensitivity of complexity relative to the choice of description language is discussed below). It can be shown that the Kolmogorov complexity of any string cannot be more than a few bytes larger than the length of the string itself. Strings like the ''abab'' example above, whose Kolmogorov complexity is small relative to the string's size, are not considered to be complex.

The Kolmogorov complexity can be defined for any mathematical object, but for simplicity the scope of this article is restricted to strings. We must first specify a description language for strings.  Such a description language can be based on any computer programming language, such as [[Lisp programming language|Lisp]], [[Pascal (programming language)|Pascal]], or [[Java virtual machine]] bytecode.  If '''P''' is a program which outputs a string ''x'', then '''P''' is a description of ''x''. The length of the description is just the length of '''P''' as a character string, multiplied by the number of bits in a character (e.g. 7 for [[ASCII]]).

We could, alternatively, choose an encoding for [[Turing machine]]s, where an ''encoding'' is a function which associates to each Turing Machine '''M''' a bitstring &lt;'''M'''&gt;. If '''M''' is a Turing Machine which, on input ''w'', outputs string ''x'', then the concatenated string &lt;'''M'''&gt; ''w'' is a description of ''x''. For theoretical analysis, this approach is more suited for constructing detailed formal proofs and is generally preferred in the research literature. In this article, an informal approach is discussed.

Any string ''s'' has at least one description, namely the program:

'''function''' GenerateFixedString()
'''return''' ''s''

If a description of ''s'', ''d''(''s''), is of minimal length (i.e. it uses the fewest bits), it is called a '''minimal description''' of ''s''.  Thus, the length of ''d''(''s'') (i.e. the number of bits in the description) is the '''Kolmogorov complexity''' of ''s'', written ''K''(''s''). Symbolically,

:''K''(''s'') = |''d''(''s'')|.

The length of the shortest description will depend on the choice of description language; but the effect of changing languages is bounded (a result called the ''invariance theorem'').

==Invariance theorem==

===Informal treatment===
There are some description languages which are optimal, in the following sense: given any description of an object in a description language, said description may be used in the optimal description language with a constant overhead. The constant depends only on the languages involved, not on the description of the object, nor the object being described.

Here is an example of an optimal description language. A description will have two parts:

* The first part describes another description language.
* The second part is a description of the object in that language.

In more technical terms, the first part of a description is a computer program, with the second part being the input to that computer program which produces the object as output.

'''The invariance theorem follows:''' Given any description language ''L'', the optimal description language is at least as efficient as ''L'', with some constant overhead.

'''Proof:''' Any description ''D'' in ''L'' can be converted into a description in the optimal language by first describing ''L'' as a computer program ''P'' (part 1), and then using the original description ''D'' as input to that program (part 2). The
total length of this new description ''D&amp;prime;'' is (approximately):

:|''D&amp;prime;''| = |''P''| + |''D''|

The length of ''P'' is a constant that doesn't depend on ''D''. So, there is at most a constant overhead, regardless of the object described. Therefore, the optimal language is universal [[up to]] this additive constant.

===A more formal treatment===
'''Theorem''': If ''K''&lt;sub&gt;1&lt;/sub&gt; and ''K''&lt;sub&gt;2&lt;/sub&gt; are the complexity functions relative to [[Turing complete]] description languages ''L''&lt;sub&gt;1&lt;/sub&gt; and ''L''&lt;sub&gt;2&lt;/sub&gt;, then there is a constant ''c''&amp;nbsp;– which depends only on the languages ''L''&lt;sub&gt;1&lt;/sub&gt; and ''L''&lt;sub&gt;2&lt;/sub&gt; chosen&amp;nbsp;– such that

:∀''s''.  -''c'' ≤ ''K''&lt;sub&gt;1&lt;/sub&gt;(''s'') - ''K''&lt;sub&gt;2&lt;/sub&gt;(''s'') ≤ ''c''.

'''Proof''': By symmetry, it suffices to prove that there is some constant ''c'' such that for all strings ''s''

:''K''&lt;sub&gt;1&lt;/sub&gt;(''s'') ≤ ''K''&lt;sub&gt;2&lt;/sub&gt;(''s'') + ''c''.

Now, suppose there is a program in the language ''L''&lt;sub&gt;1&lt;/sub&gt; which acts as an [[interpreter (computing)|interpreter]] for ''L''&lt;sub&gt;2&lt;/sub&gt;:

'''function''' InterpretLanguage('''string''' ''p'')

where ''p'' is a program in ''L''&lt;sub&gt;2&lt;/sub&gt;. The interpreter is characterized by the following property:

: Running &lt;code&gt;InterpretLanguage&lt;/code&gt; on input ''p'' returns the result of running ''p''.

Thus, if '''P''' is a program in ''L''&lt;sub&gt;2&lt;/sub&gt; which is a minimal description of ''s'', then &lt;code&gt;InterpretLanguage&lt;/code&gt;('''P''') returns the string ''s''. The length of this description of ''s'' is the sum of

# The length of the program &lt;code&gt;InterpretLanguage&lt;/code&gt;, which we can take to be the constant ''c''.
# The length of '''P''' which by definition is ''K''&lt;sub&gt;2&lt;/sub&gt;(''s'').

This proves the desired upper bound.

==History and context==
[[Algorithmic information theory]] is the area of computer science that studies Kolmogorov complexity and other complexity measures on strings (or other [[data structure]]s).

The concept and theory of Kolmogorov Complexity is based on a crucial theorem first discovered by [[Ray Solomonoff]], who published it in 1960, describing it in &quot;A Preliminary Report on a General Theory of Inductive Inference&quot;&lt;ref&gt;{{cite journal |authorlink=Ray Solomonoff | last=Solomonoff |first= Ray | url=http://world.std.com/~rjs/rayfeb60.pdf |format=PDF | title=A Preliminary Report on a General Theory of Inductive Inference | journal= Report V-131 |publisher= Zator Co. |location= Cambridge, Ma. | date= February 4, 1960 }} [http://world.std.com/~rjs/z138.pdf revision], Nov., 1960.&lt;/ref&gt; as part of his invention of [[algorithmic probability]]. He gave a more complete description in his 1964 publications, &quot;A Formal Theory of Inductive Inference,&quot; Part 1 and Part 2 in ''Information and Control''.&lt;ref&gt;{{cite journal
| doi=10.1016/S0019-9958(64)90223-2
| last=Solomonoff
| first= Ray
| title=A Formal Theory of Inductive Inference Part I
| journal = Information and Control
| url=http://world.std.com/~rjs/1964pt1.pdf
| volume=7
| issue= 1
| pages= 1–22
| date=March 1964
}}&lt;/ref&gt;&lt;ref&gt;{{cite journal
| doi=10.1016/S0019-9958(64)90131-7
| last=Solomonoff
|first= Ray
| title=A Formal Theory of Inductive Inference Part II
| journal = Information and Control
| url=http://world.std.com/~rjs/1964pt2.pdf
|volume=7
|issue= 2
|pages= 224–254
|date=June 1964
}}&lt;/ref&gt;

Andrey Kolmogorov later [[multiple discovery|independently published]] this theorem in ''Problems Inform. Transmission''&lt;ref&gt;{{cite journal|volume=1 |issue=1 |year=1965 |pages=1–7 |title=Three Approaches to the Quantitative Definition of Information |url=http://www.ece.umd.edu/~abarg/ppi/contents/1-65-abstracts.html#1-65.2 |journal=Problems Inform. Transmission |first=A.N. |last=Kolmogorov |deadurl=yes |archiveurl=https://web.archive.org/web/20110928032821/http://www.ece.umd.edu/~abarg/ppi/contents/1-65-abstracts.html |archivedate=September 28, 2011 }}&lt;/ref&gt; in 1965. Gregory Chaitin also presents this theorem in ''J. ACM''&amp;nbsp;– Chaitin's paper was submitted October 1966 and revised in December 1968, and cites both Solomonoff's and Kolmogorov's papers.&lt;ref&gt;{{cite journal | last1 = Chaitin | first1 = Gregory J. | title = On the Simplicity and Speed of Programs for Computing Infinite Sets of Natural Numbers| url=http://www.cs.auckland.ac.nz/~chaitin/acm69b.pdf| journal = Journal of the ACM | volume = 16 | pages = 407–422| year = 1969 | doi = 10.1145/321526.321530 | issue = 3}}&lt;/ref&gt;

The theorem says that, among algorithms that decode strings from their descriptions (codes), there exists an optimal one. This algorithm, for all strings, allows codes as short as allowed by any other algorithm up to an additive constant that depends on the algorithms, but not on the strings themselves. Solomonoff used this algorithm, and the code lengths it allows, to define a &quot;universal probability&quot; of a string on which inductive inference of the subsequent digits of the string can be based. Kolmogorov used this theorem to define several functions of strings, including complexity, randomness, and information.

When Kolmogorov became aware of Solomonoff's work, he acknowledged Solomonoff's priority.&lt;ref&gt;{{cite journal | last1=Kolmogorov | first1=A. | title=Logical basis for information theory and probability theory | journal=IEEE Transactions on Information Theory | volume=14|issue=5 | pages=662–664 | year=1968 | doi =10.1109/TIT.1968.1054210 }}&lt;/ref&gt; For several years, Solomonoff's work was better known in the Soviet Union than in the Western World. The general consensus in the scientific community, however, was to associate this type of complexity with Kolmogorov, who was concerned with randomness of a sequence, while Algorithmic Probability became associated with Solomonoff, who focused on prediction using his invention of the universal prior probability distribution. The broader area encompassing descriptional complexity and probability is often called Kolmogorov complexity. The computer scientist Ming Li considers this an example of the [[Matthew effect (sociology)|Matthew effect]]: &quot;... to everyone who has more will be given ...&quot;&lt;ref&gt;{{Cite book
| edition = 2nd
| publisher = Springer
| isbn = 0-387-94868-6
| last = Li
| first = Ming
| author2 = Paul Vitanyi
| title = An Introduction to Kolmogorov Complexity and Its Applications
|page=90
| date = 1997-02-27
}}&lt;/ref&gt;

There are several other variants of Kolmogorov complexity or algorithmic information. The most widely used one is based on [[self-delimiting program]]s, and is mainly due to [[Leonid Levin]] (1974).

An axiomatic approach to Kolmogorov complexity based on [[Blum axioms]] (Blum 1967) was introduced by Mark Burgin in the paper presented for publication by Andrey Kolmogorov (Burgin 1982).

==Basic results==
In the following discussion, let ''K''(''s'') be the complexity of the string ''s''.

It is not hard to see that the minimal description of a string cannot be too much larger than the string itself&amp;nbsp;— the program &lt;code&gt;GenerateFixedString&lt;/code&gt; above that outputs ''s'' is a fixed amount larger than ''s''.

'''Theorem''': There is a constant ''c'' such that

:∀''s''. ''K''(''s'') ≤ |''s''| + ''c''.

===Uncomputability of Kolmogorov complexity===

'''Theorem''': There exist strings of arbitrarily large Kolmogorov complexity. Formally: for each ''n'' ∈ ℕ, there is a string ''s'' with ''K''(''s'') ≥ ''n''.&lt;ref group=&quot;note&quot;&gt;However, an ''s'' with ''K''(''s'') = ''n'' needn't exist for every ''n''. For example, if ''n'' isn't a multiple of 7 bits, no [[ASCII]] program can have a length of exactly ''n'' bits.&lt;/ref&gt;

'''Proof:''' Otherwise all of the infinitely many possible finite strings could be generated by the finitely many&lt;ref group=&quot;note&quot;&gt;There are 1 + 2 + 2&lt;sup&gt;2&lt;/sup&gt; + 2&lt;sup&gt;3&lt;/sup&gt; + ... + 2&lt;sup&gt;''n''&lt;/sup&gt; = 2&lt;sup&gt;''n''+1&lt;/sup&gt; − 1 different program texts of length up to ''n'' bits; cf. [[geometric series]]. If program lengths are to be multiples of 7 bits, even fewer program texts exist.&lt;/ref&gt; programs with a complexity below ''n'' bits.

'''Theorem''':  ''K'' is not a [[computable function]]. In other words, there is no program which takes a string ''s'' as input and produces the integer ''K''(''s'') as output.

The following [[indirect proof|indirect '''proof''']] uses a simple [[Pascal (programming language)|Pascal]]-like language to denote programs; for sake of proof simplicity assume its description (i.e. an [[interpreter (computing)|interpreter]]) to have a length of {{val|1400000}} bits.
Assume for contradiction there is a program

'''function''' KolmogorovComplexity('''string''' s)

which takes as input a string ''s'' and returns ''K''(''s''); for sake of proof simplicity, assume the program's length to be {{val|7000000000}} bits.
Now, consider the following program of length {{val|1288}} bits:

'''function''' GenerateComplexString()
'''for''' i = 1 '''to''' infinity:
'''for each''' string s '''of''' length exactly i
'''if''' KolmogorovComplexity(s) &gt;= 8000000000
'''return''' s

Using &lt;code&gt;KolmogorovComplexity&lt;/code&gt; as a subroutine, the program tries every string, starting with the shortest, until it returns a string with Kolmogorov complexity at least {{val|8000000000}} bits,&lt;ref group=&quot;note&quot;&gt;By the previous theorem, such a string exists, hence the &lt;code&gt;for&lt;/code&gt; loop will eventually terminate.&lt;/ref&gt; i.e. a string that cannot be produced by any program shorter than {{val|8000000000}} bits. However, the overall length of the above program that produced ''s'' is only {{val|7001401288}} bits,&lt;ref group=note&gt;including the language interpreter and the subroutine code for &lt;code&gt;KolmogorovComplexity&lt;/code&gt;&lt;/ref&gt; which is a contradiction. (If the code of &lt;code&gt;KolmogorovComplexity&lt;/code&gt; is shorter, the contradiction remains. If it is longer, the constant used in &lt;code&gt;GenerateComplexString&lt;/code&gt; can always be changed appropriately.)&lt;ref group=note&gt;If &lt;code&gt;KolmogorovComplexity&lt;/code&gt; has length ''n'' bits, the constant ''m'' used in &lt;code&gt;GenerateComplexString&lt;/code&gt; needs to be adapted to satisfy {{nobreak|''n'' + {{val|1400000}} + {{val|1218}} + 7·log&lt;sub&gt;10&lt;/sub&gt;(''m'') &lt; ''m''}}, which is always possible since ''m'' grows faster than log&lt;sub&gt;10&lt;/sub&gt;(''m'').&lt;/ref&gt;

The above proof used a contradiction similar to that of the [[Berry paradox]]: &quot;&lt;sub&gt;{{color|#8080ff|1}}&lt;/sub&gt;The &lt;sub&gt;{{color|#8080ff|2}}&lt;/sub&gt;smallest &lt;sub&gt;{{color|#8080ff|3}}&lt;/sub&gt;positive &lt;sub&gt;{{color|#8080ff|4}}&lt;/sub&gt;integer &lt;sub&gt;{{color|#8080ff|5}}&lt;/sub&gt;that &lt;sub&gt;{{color|#8080ff|6}}&lt;/sub&gt;cannot &lt;sub&gt;{{color|#8080ff|7}}&lt;/sub&gt;be &lt;sub&gt;{{color|#8080ff|8}}&lt;/sub&gt;defined &lt;sub&gt;{{color|#8080ff|9}}&lt;/sub&gt;in &lt;sub&gt;{{color|#8080ff|10}}&lt;/sub&gt;fewer &lt;sub&gt;{{color|#8080ff|11}}&lt;/sub&gt;than &lt;sub&gt;{{color|#8080ff|12}}&lt;/sub&gt;twenty &lt;sub&gt;{{color|#8080ff|13}}&lt;/sub&gt;English &lt;sub&gt;{{color|#8080ff|14}}&lt;/sub&gt;words&quot;. It is also possible to show the non-computability of ''K'' by reduction from the non-computability of the halting problem ''H'', since ''K'' and ''H'' are [[turing degree#Turing equivalence|Turing-equivalent]].&lt;ref&gt;Stated without proof in: [http://www.daimi.au.dk/~bromille/DC05/Kolmogorov.pdf &quot;''Course notes for Data Compression - Kolmogorov complexity''&quot;], 2005, P.B. Miltersen, p.7&lt;/ref&gt;

There is a corollary, humorously called the &quot;[[full employment theorem]]&quot; in the programming language community, stating that there is no perfect size-optimizing compiler.

'''A naive attempt at a program for K'''

At first glance it might seem trivial to write a program which can compute ''K''(''s'') for any ''s'' (thus disproving the above theorem), such as the following:

'''function''' KolmogorovComplexity('''string''' s)
'''for''' i = 1 '''to''' infinity:
'''for each''' string p '''of''' length exactly i
'''if''' isValidProgram(p) '''and''' evaluate(p) == s
'''return''' i

This program iterates through all possible programs (by iterating through all possible strings and only considering those which are valid programs), starting with the shortest. Each program is executed to find the result produced by that program, comparing it to the input ''s''. If the result matches the length of the program is returned.

However this will not work because some of the programs ''p'' tested will not terminate, e.g. if they contain infinite loops. There is no way to avoid all of these programs by testing them in some way before executing them due to the non-computability of the halting problem.

===Chain rule for Kolmogorov complexity===
{{Main| Chain rule for Kolmogorov complexity}}
The chain rule&lt;ref&gt;{{cite news
| first = A.
| last = Zvonkin
|author2=L. Levin
| title = The complexity of finite objects and the development of the concepts of information and randomness by means of the theory of algorithms.
| journal = Russian Mathematical Surveys
| volume = 25
| number = 6
| pages = 83–124
| year = 1970}}&lt;/ref&gt; for Kolmogorov complexity states that

:''K''(''X'',''Y'') ≤ ''K''(''X'') + ''K''(''Y''|''X'') + ''O''(log(''K''(''X'',''Y''))).

It states that the shortest program that reproduces ''X'' and ''Y'' is [[Big-O notation|no more]] than a logarithmic term larger than a program to reproduce ''X'' and a program to reproduce ''Y'' given ''X''. Using this statement, one can define [[Mutual information#Absolute mutual information|an analogue of mutual information for Kolmogorov complexity]].

==Compression==
It is straightforward to compute upper bounds for ''K''(''s'')&amp;nbsp;– simply [[data compression|compress]] the string ''s'' with some method, implement the corresponding decompressor in the chosen language, concatenate the decompressor to the compressed string, and measure the length of the resulting string&amp;nbsp;– concretely, the size of a [[self-extracting archive]] in the given language.

A string ''s'' is compressible by a number ''c'' if it has a description whose length does not exceed |''s''|−''c'' bits. This is equivalent to saying that ''K''(''s'') ≤ |''s''|-''c''.  Otherwise, ''s'' is incompressible by ''c''. A string incompressible by 1 is said to be simply ''incompressible''&amp;nbsp;– by the [[pigeonhole principle]], which applies because every compressed string maps to only one uncompressed string, [[incompressible string]]s must exist, since there are 2&lt;sup&gt;''n''&lt;/sup&gt; bit strings of length ''n'', but only 2&lt;sup&gt;''n''&lt;/sup&gt; - 1 shorter strings, that is, strings of length less than ''n'', (i.e. with length 0,1,...,''n&amp;nbsp;−&amp;nbsp;1).&lt;ref group=note&gt;As there are {{nobr|1=''N''&lt;sub&gt;''L''&lt;/sub&gt; = 2&lt;sup&gt;''L''&lt;/sup&gt;}} strings of length ''L'', the number of strings of lengths {{nowrap|1=''L'' = 0, 1, ..., ''n'' − 1}} is {{nobr|''N''&lt;sub&gt;0&lt;/sub&gt; + ''N''&lt;sub&gt;1&lt;/sub&gt; + ... + ''N''&lt;sub&gt;''n''−1&lt;/sub&gt;}} = {{nobr|2&lt;sup&gt;0&lt;/sup&gt; + 2&lt;sup&gt;1&lt;/sup&gt; + ... + 2&lt;sup&gt;''n''−1&lt;/sup&gt;}}, which is a finite [[geometric series]] with sum {{nobr|2&lt;sup&gt;0&lt;/sup&gt; + 2&lt;sup&gt;1&lt;/sup&gt; + ... + 2&lt;sup&gt;''n''−1&lt;/sup&gt;}} = {{nobr|1 = 2&lt;sup&gt;0&lt;/sup&gt; × (1 − 2&lt;sup&gt;''n''&lt;/sup&gt;) / (1 − 2) = 2&lt;sup&gt;''n''&lt;/sup&gt; − 1}}&lt;/ref&gt;

For the same reason, most strings are complex in the sense that they cannot be significantly compressed&amp;nbsp;– their ''K''(''s'') is not much smaller than |''s''|, the length of ''s'' in bits. To make this precise, fix a value of ''n''. There are 2&lt;sup&gt;''n''&lt;/sup&gt; bitstrings of length ''n''. The [[Uniform distribution (discrete)|uniform]] [[probability]] distribution on the space of these bitstrings assigns exactly equal weight 2&lt;sup&gt;−''n''&lt;/sup&gt; to each string of length ''n''.

'''Theorem''': With the uniform probability distribution on the space of bitstrings of length ''n'', the probability that a string is incompressible by ''c'' is at least 1 - 2&lt;sup&gt;−''c''+1&lt;/sup&gt; + 2&lt;sup&gt;−''n''&lt;/sup&gt;.

To prove the theorem, note that the number of descriptions of length not exceeding ''n''-''c'' is given by the geometric series:

:1 + 2 + 2&lt;sup&gt;2&lt;/sup&gt; + ... + 2&lt;sup&gt;''n''-''c''&lt;/sup&gt; = 2&lt;sup&gt;''n''-''c''+1&lt;/sup&gt; - 1.

There remain at least

:2&lt;sup&gt;''n''&lt;/sup&gt; - 2&lt;sup&gt;''n''-''c''+1&lt;/sup&gt; + 1

bitstrings of length ''n'' that are incompressible by ''c''.  To determine the probability, divide by 2&lt;sup&gt;''n''&lt;/sup&gt;.

==Chaitin's incompleteness theorem==
[[File:Kolmogorov complexity and computable lower bounds.gif|thumb|right|500px|Kolmogorov complexity {{color|#800000|''K''(''s'')}}, and two computable lower bound functions &lt;code&gt;{{color|#808000|prog1(s)}}&lt;/code&gt;, &lt;code&gt;{{color|#008000|prog2(s)}}&lt;/code&gt;. The horizontal axis ([[logarithmic scale]]) enumerates all [[string (computer science)|strings]] ''s'', ordered by length; the vertical axis ([[linear scale]]) measures Kolmogorov complexity in [[bit]]s. Most strings are incompressible, i.e. their Kolmogorov complexity exceeds their length by a constant amount. 17 compressible strings are shown in the picture, appearing as almost vertical slopes. Due to Chaitin's incompleteness theorem (1974), the output of any program computing a lower bound of the Kolmogorov complexity cannot exceed some fixed limit, which is independent of the input string ''s''.]]
We know that, in the set of all possible strings, most strings are complex in the sense that they cannot be described in any significantly &quot;compressed&quot; way. However, it turns out that the fact that a specific string is complex cannot be formally proven, if the complexity of the string is above a certain threshold. The precise formalization is as follows. First, fix a particular [[axiomatic system]] '''S''' for the [[natural number]]s. The axiomatic system has to be powerful enough so that, to certain assertions  '''A''' about complexity of strings, one can associate a formula '''F'''&lt;sub&gt;'''A'''&lt;/sub&gt; in '''S'''. This association must have the following property:

If '''F'''&lt;sub&gt;'''A'''&lt;/sub&gt; is provable from the axioms of '''S''', then the corresponding assertion '''A''' must be true. This &quot;formalization&quot; can be achieved, either by an artificial encoding such as a [[Gödel numbering]], or by a formalization which more clearly respects the intended interpretation of '''S'''.

'''Theorem''': There exists a constant ''L'' (which only depends on the particular axiomatic system and the choice of description language) such that there does not exist a string ''s'' for which the statement

:''K''(''s'') ≥  ''L'' (as formalized in '''S''')

can be proven within the axiomatic system '''S'''.

Note that, by the abundance of nearly incompressible strings, the vast majority of those statements must be true.

The proof of this result is modeled on a self-referential construction used in [[Berry's paradox]]. The proof is by contradiction. If the theorem were false, then

:'''Assumption (X)''': For any integer ''n'' there exists a string ''s'' for which there is a proof in '''S''' of the formula &quot;''K''(''s'')&amp;nbsp;≥&amp;nbsp;''n''&quot; (which we assume can be formalized in '''S''').

We can find an effective enumeration of all the formal proofs in '''S''' by some procedure

'''function''' NthProof('''int''' ''n'')
which takes as input ''n'' and outputs some proof. This function enumerates all proofs. Some of these are proofs for formulas we do not care about here, since every possible proof in the language of '''S''' is produced for some ''n''. Some of these are complexity formulas of the form ''K''(''s'')&amp;nbsp;≥&amp;nbsp;''n'' where ''s'' and ''n'' are constants in the language of '''S'''. There is a program

'''function''' NthProofProvesComplexityFormula('''int''' ''n'')

which determines whether the ''n''th proof actually proves a complexity formula ''K''(''s'')&amp;nbsp;≥&amp;nbsp;''L''. The strings ''s'', and the integer ''L'' in turn, are computable by programs:

'''function''' StringNthProof('''int''' ''n'')

'''function''' ComplexityLowerBoundNthProof('''int''' ''n'')

Consider the following program

'''function''' GenerateProvablyComplexString('''int''' ''n'')
'''for''' i = 1 to infinity:
'''if'''  NthProofProvesComplexityFormula(i) '''and''' ComplexityLowerBoundNthProof(i) ≥ ''n''
'''return''' StringNthProof(''i'')

Given an ''n'', this program tries every proof until it finds a string and a proof in the [[formal system]] '''S''' of the formula ''K''(''s'')&amp;nbsp;≥&amp;nbsp;''L'' for some ''L''&amp;nbsp;≥&amp;nbsp;''n''. The program terminates by our '''Assumption (X)'''. Now, this program has a length ''U''. There is an integer ''n''&lt;sub&gt;0&lt;/sub&gt; such that ''U''&amp;nbsp;+&amp;nbsp;log&lt;sub&gt;2&lt;/sub&gt;(''n''&lt;sub&gt;0&lt;/sub&gt;)&amp;nbsp;+&amp;nbsp;''C''&amp;nbsp;&lt;&amp;nbsp;''n''&lt;sub&gt;0&lt;/sub&gt;, where ''C'' is the overhead cost of

'''function''' GenerateProvablyParadoxicalString()
'''return''' GenerateProvablyComplexString(''n''&lt;sub&gt;0&lt;/sub&gt;)

(note that ''n''&lt;sub&gt;0&lt;/sub&gt; is hard-coded into the above function, and the summand log&lt;sub&gt;2&lt;/sub&gt;(''n''&lt;sub&gt;0&lt;/sub&gt;) already allows for its encoding). The program GenerateProvablyParadoxicalString outputs a string ''s'' for which there exists an ''L'' such that ''K''(''s'')&amp;nbsp;≥&amp;nbsp;''L'' can be formally proved in '''S''' with ''L''&amp;nbsp;≥&amp;nbsp;''n''&lt;sub&gt;0&lt;/sub&gt;. In particular, ''K''(''s'')&amp;nbsp;≥&amp;nbsp;''n''&lt;sub&gt;0&lt;/sub&gt; is true. However, ''s'' is also described by a program of length ''U''&amp;nbsp;+&amp;nbsp;log&lt;sub&gt;2&lt;/sub&gt;(''n''&lt;sub&gt;0&lt;/sub&gt;)&amp;nbsp;+&amp;nbsp;''C'', so its complexity is less than ''n''&lt;sub&gt;0&lt;/sub&gt;.  This contradiction proves '''Assumption (X)''' cannot hold.

Similar ideas are used to prove the properties of [[Chaitin's constant]].

==Minimum message length==
{{Main|Minimum message length}}
The minimum message length principle of statistical and inductive inference and machine learning was developed by [[Chris Wallace (computer scientist)|C.S. Wallace]] and D.M. Boulton in 1968. MML is [[Bayesian probability|Bayesian]] (i.e. it incorporates prior beliefs) and information-theoretic. It has the desirable properties of statistical invariance (i.e. the inference transforms with a re-parametrisation, such as from polar coordinates to Cartesian coordinates), statistical consistency (i.e. even for very hard problems, MML will converge to any underlying model) and efficiency (i.e. the MML model will converge to any true underlying model about as quickly as is possible). C.S. Wallace and D.L. Dowe (1999) showed a formal connection between MML and algorithmic information theory (or Kolmogorov complexity).

==Kolmogorov randomness==
{{See also|Algorithmic randomness}}
''Kolmogorov randomness'' defines a string (usually of [[bit]]s) as being [[randomness|random]] if and only if it is shorter than any [[computer program]] that can produce that string.  To make this precise, a [[Universal Turing machine|universal computer]] (or universal Turing machine) must be specified, so that &quot;program&quot; means a program for this universal machine. A random string in this sense is &quot;incompressible&quot; in that it is impossible to &quot;compress&quot; the string into a program whose length is shorter than the length of the string itself.  A [[counting argument]] is used to show that, for any universal computer, there is at least one algorithmically random string of each length.  Whether any particular string is random, however, depends on the specific universal computer that is chosen.

This definition can be extended to define a notion of randomness for ''infinite'' sequences from a finite alphabet. These [[algorithmically random sequence]]s can be defined in three equivalent ways. One way uses an effective analogue of [[measure theory]]; another uses effective [[Martingale (probability theory)|martingales]].  The third way defines an infinite sequence to be random if the prefix-free Kolmogorov complexity of its initial segments grows quickly enough&amp;nbsp;— there must be a constant ''c'' such that the complexity of an initial segment of length ''n'' is always at least ''n''−''c''.  This definition, unlike the definition of randomness for a finite string, is not affected by which universal machine is used to define prefix-free Kolmogorov complexity.
&lt;ref&gt;{{Cite journal | last1 = Martin-Löf | first1 = P. | last2 = | first2 =  | year = 1966 | title = The definition of random sequences | journal = Information and Control | volume = 9 | issue = 6 | pages = 602–619 | publisher =  | jstor =  | url = http://statweb.stanford.edu/~cgates/PERSI/Courses/Phil166-266/Martin-Lof.pdf | accessdate = | doi=10.1016/s0019-9958(66)80018-9}}&lt;/ref&gt;

==Relation to entropy==
For dynamical systems, entropy rate and algorithmic complexity of the trajectories are related by a theorem of Brudno, that the equality K(x;T) =  h(T) holds for almost all x.&lt;ref&gt;{{cite journal |authors=Stefano Galatolo, Mathieu Hoyrup, Cristóbal Rojas |title=Effective symbolic dynamics, random points, statistical behavior, complexity and entropy | journal=Information and Computation | volume=208 | pages=23–41 | year=2010| url=http://www.loria.fr/~hoyrup/random_ergodic.pdf | doi=10.1016/j.ic.2009.05.001}}&lt;/ref&gt;

It can be shown&lt;ref&gt;{{cite arxiv |author=Alexei Kaltchenko |title=Algorithms for Estimating Information Distance with Application to Bioinformatics and Linguistics  |year=2004 |eprint=cs.CC/0404039}}&lt;/ref&gt; that for the output of [[Markov information source]]s, Kolmogorov complexity is related to the [[Entropy (information theory)|entropy]] of the information source. More precisely, the Kolmogorov complexity of the output of a Markov information source, normalized by the length of the output, converges almost surely (as the length of the output goes to infinity) to the [[Entropy (information theory)|entropy]] of the source.

==Conditional versions==
{{expand section|date=July 2014}}
The conditional Kolmogorov complexity of two strings &lt;math&gt;K(x|y)&lt;/math&gt; is, roughly speaking, defined as the Kolmogorov complexity of ''x'' given ''y'' as an auxiliary input to the procedure.&lt;ref name=&quot;Rissanen2007&quot;&gt;{{cite book|author=Jorma Rissanen|title=Information and Complexity in Statistical Modeling|year=2007|publisher=Springer Science &amp; Business Media|isbn=978-0-387-68812-1|page=53}}&lt;/ref&gt;&lt;ref&gt;{{cite book|author1=Ming Li|author2=Paul M.B. Vitányi|title=An Introduction to Kolmogorov Complexity and Its Applications|year=2009|publisher=Springer Science &amp; Business Media|isbn=978-0-387-49820-1|pages=105–106}}&lt;/ref&gt;

There is also a length-conditional complexity &lt;math&gt;K(x|L(x))&lt;/math&gt;, which is the complexity of ''x'' given the length of ''x'' as known/input.&lt;ref&gt;{{cite book|author1=Ming Li|author2=Paul M.B. Vitányi|title=An Introduction to Kolmogorov Complexity and Its Applications|year=2009|publisher=Springer Science &amp; Business Media|isbn=978-0-387-49820-1|page=119}}&lt;/ref&gt;

==See also==
* [[Berry paradox]]
* [[Code golf]]
* [[Data compression]]
* [[Inductive inference]]
* [[Kolmogorov structure function]]
* [[List of important publications in theoretical computer science#Algorithmic information theory|Important publications in algorithmic information theory]]
* [[Solomonoff's theory of inductive inference]]
* [[Levenshtein distance]]
* [[Grammar induction]]
* [[Demoscene]], a computer art discipline whose certain branches are centered around the creation of smallest programs that achieve certain effects

==Notes==
{{Reflist|group=note}}

==References==
{{Reflist|30em}}

* {{cite journal | authorlink=Manuel Blum|last=Blum | title=On the size of machines | journal=Information and Control |first= M. | volume=11 | issue=3 | page=257 | year=1967 | doi = 10.1016/S0019-9958(67)90546-3 }}
* Brudno, A. Entropy and the complexity of the trajectories of a dynamical system., Transactions of the Moscow Mathematical Society, 2:127{151, 1983.
* Burgin, M. (1982), &quot;Generalized Kolmogorov complexity and duality in theory of computations&quot;, ''Notices of the Russian Academy of Sciences'', v.25, No. 3, pp.&amp;nbsp;19–23.
* Cover, Thomas M. and Thomas, Joy A., ''Elements of information theory'', 1st Edition.  New York: Wiley-Interscience, 1991. {{isbn|0-471-06259-6}}. 2nd Edition. New York: Wiley-Interscience, 2006. {{isbn|0-471-24195-4}}.
* Lajos, Rónyai and Gábor, Ivanyos and Réka, Szabó, ''Algoritmusok''. TypoTeX, 1999. {{isbn|963-279-014-6}}
* {{cite book|author1=Li, Ming  |author2=Vitányi, Paul|title=An Introduction to Kolmogorov Complexity and Its Applications|publisher=Springer|year=1997 |isbn= 978-0387339986}} [http://citeseer.ist.psu.edu/li97introduction.html First chapter on citeseer]
* Yu Manin, ''A Course in Mathematical Logic'', Springer-Verlag, 1977. {{isbn|978-0-7204-2844-5}}
* Sipser, Michael, ''Introduction to the Theory of Computation'', PWS Publishing Company, 1997. {{isbn|0-534-95097-3}}.
* [[Chris Wallace (computer scientist)|Wallace, C. S]].  and Dowe, D. L., [http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.17.321 Minimum Message Length and Kolmogorov Complexity], Computer Journal, Vol. 42, No. 4, 1999).

==External links==
* [http://www.kolmogorov.com/ The Legacy of Andrei Nikolaevich Kolmogorov]
* [https://web.archive.org/web/20150215210504/http://www.cs.umaine.edu/~chaitin/ Chaitin's online publications]
* [http://www.idsia.ch/~juergen/ray.html Solomonoff's IDSIA page]
* [http://www.idsia.ch/~juergen/kolmogorov.html Generalizations of algorithmic information] by [[Juergen Schmidhuber|J. Schmidhuber]]
* [http://homepages.cwi.nl/~paulv/kolmogorov.html Ming Li and Paul Vitanyi, An Introduction to Kolmogorov Complexity and Its Applications, 2nd Edition, Springer Verlag, 1997.]
* [http://tromp.github.io/cl/cl.html Tromp's lambda calculus computer model offers a concrete definition of K()]
* Universal AI based on Kolmogorov Complexity {{isbn|3-540-22139-5}} by [[Marcus Hutter|M. Hutter]]:  {{isbn|3-540-22139-5}}
* [http://www.csse.monash.edu.au/~dld David Dowe]'s [http://www.csse.monash.edu.au/~dld/MML.html Minimum Message Length (MML)] and [http://www.csse.monash.edu.au/~dld/Occam.html Occam's razor] pages.
* P. Grunwald, M. A. Pitt and I. J. Myung (ed.), [https://web.archive.org/web/20060619060230/http://mitpress.mit.edu/catalog/item/default.asp?sid=4C100C6F-2255-40FF-A2ED-02FC49FEBE7C&amp;ttype=2&amp;tid=10478 Advances in Minimum Description Length: Theory and Applications], M.I.T. Press, April 2005, {{isbn|0-262-07262-9}}.

{{Compression Methods}}

{{DEFAULTSORT:Kolmogorov Complexity}}
[[Category:Algorithmic information theory|*]]
[[Category:Information theory|*]]
[[Category:Computability theory]]
[[Category:Descriptive complexity]]
[[Category:Measures of complexity]]</text>
<sha1>h1pxolhinlz98zx6hqzwhhs3jo988vq</sha1>
</revision>
</page>
